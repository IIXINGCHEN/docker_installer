# .github/workflows/docker_installer_workflow.yml
# Final Production-Ready Code 
# (Features: Removed Asset Display, Retained Installation Guide, Accurate File Count, Improved Formatting)

name: Docker Installer Workflow

on:
  schedule:
    - cron: '0 16 * * *'
  workflow_dispatch: {}

jobs:
  download_and_verify:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up environment
        run: |
          set -euf -o pipefail
          sudo apt-get update -y
          sudo apt-get install -y curl

      - name: Retrieve Latest Docker Version
        id: get_latest_version
        run: |
          set -euf -o pipefail
          latest_version=$(curl -s https://download.docker.com/linux/static/stable/x86_64/ | grep -oP 'docker-\K[0-9]+\.[0-9]+\.[0-9]+' | sort -V | tail -n 1)
          if [ -z "$latest_version" ]; then
            echo "Error: No stable Docker version found, exiting."
            exit 1
          fi
          echo "Latest stable Docker version: $latest_version"
          echo "version=$latest_version" >>$GITHUB_ENV

      - name: Download Docker Installers
        run: |
          set -euf -o pipefail
          INSTALLER_DIR="installers"
          mkdir -p "$INSTALLER_DIR"
          
          declare -A installers=(
            ["windows_x86_64"]="https://desktop.docker.com/win/stable/amd64/Docker%20Desktop%20Installer.exe"
            ["mac_arm64"]="https://desktop.docker.com/mac/stable/arm64/Docker.dmg"
            ["mac_x86_64"]="https://desktop.docker.com/mac/stable/amd64/Docker.dmg"
            ["linux_debian_x86_64"]="https://desktop.docker.com/linux/main/amd64/docker-desktop-latest-amd64.deb"
            ["linux_fedora_x86_64"]="https://desktop.docker.com/linux/main/amd64/docker-desktop-latest-x86_64.rpm"
            ["linux_ubuntu_x86_64"]="https://desktop.docker.com/linux/main/amd64/docker-desktop-latest-amd64.deb"
            ["linux_centos_x86_64"]="https://desktop.docker.com/linux/main/amd64/docker-desktop-latest-x86_64.rpm"
          )
          
          for key in "${!installers[@]}"; do
            url="${installers[$key]}"
            extension="${url##*.}"
            file_name="docker_desktop_installer_${key}.${extension}"
            file_path="$INSTALLER_DIR/$file_name"
            
            echo "Downloading $file_name from $url"
            curl -L -o "$file_path" "$url" || { echo "Error: Failed to download $file_name"; exit 1; }
            
            if [ -s "$file_path" ]; then
              echo "$file_name downloaded successfully."
            else
              echo "Error: $file_name download failed or file is empty"
              exit 1
            fi
          done

      - name: Download Docker Installation Script
        run: |
          set -euf -o pipefail
          INSTALLER_DIR="installers"
          mkdir -p "$INSTALLER_DIR"
          SCRIPT_URL="https://get.docker.com"
          SCRIPT_FILE_NAME="docker_install.sh"
          SCRIPT_FILE_PATH="$INSTALLER_DIR/$SCRIPT_FILE_NAME"
          echo "Downloading Docker installation script $SCRIPT_URL to $SCRIPT_FILE_PATH"
          curl -sL -o "$SCRIPT_FILE_PATH" "$SCRIPT_URL" || { echo "Error: Failed to download $SCRIPT_FILE_NAME"; exit 1; }
          echo "$SCRIPT_FILE_NAME downloaded successfully."

      - name: Download Docker Engine Static Binary (Linux x86_64)
        run: |
          set -euf -o pipefail
          INSTALLER_DIR="installers"
          ENGINE_VERSION="${{ env.version }}"
          
          if [ -z "$ENGINE_VERSION" ]; then
            echo "Error: Docker Engine version (env.version) not retrieved, cannot download static binary."
            exit 1
          fi
          
          STATIC_BINARY_FILE_NAME="docker-${ENGINE_VERSION}.tgz"
          STATIC_BINARY_URL="https://download.docker.com/linux/static/stable/x86_64/${STATIC_BINARY_FILE_NAME}"
          
          mkdir -p "$INSTALLER_DIR"
          echo "Downloading Docker Engine static binary: $STATIC_BINARY_URL"
          curl -L -o "$INSTALLER_DIR/$STATIC_BINARY_FILE_NAME" "$STATIC_BINARY_URL" || { echo "Error: Failed to download $STATIC_BINARY_FILE_NAME"; exit 1; }
          
          if [ -s "$INSTALLER_DIR/$STATIC_BINARY_FILE_NAME" ]; then
            echo "$STATIC_BINARY_FILE_NAME downloaded successfully to $INSTALLER_DIR/."
          else
            echo "Error: $STATIC_BINARY_FILE_NAME download failed or file is empty"
            exit 1
          fi

      - name: Prepare Release Notes
        run: |
          set -euf -o pipefail
          generate_release_notes() {
            INSTALLER_DIR="installers"
            local release_note_file="release_notes.md"
            local engine_version_from_env="${{ env.version }}"
            local engine_version_display="v${engine_version_from_env}"
            local current_date=$(date -u +"%Y-%m-%d %H:%M:%S UTC")

            # Write release notes (remove all asset sections)
            {
              echo "<!-- -*- coding: utf-8 -*- -->"
              echo "# 🐳 **Docker Installers Release - Engine *${engine_version_display}* ** 🚀"
              echo ""
              echo "> **Generated on**: *${current_date}*"
              echo ""
              echo "This release provides the latest Docker installers and tools, fetched from official sources. The Docker Engine version above applies to the static binary and the \`get.docker.com\` script."
              echo ""
              echo "---"
              echo "## **Installation Guide** 📚"
              echo ""
              echo "### 🇬🇧 **How to Install**"
              echo "1. **Download**: Select the appropriate installer from the 'Assets' section below."
              echo "2. **Verify**: Use the SHA256 checksum (available in the release assets) to verify the downloaded file."
              echo "3. **Install**: Follow the official [Docker Installation Instructions](https://docs.docker.com/get-docker/)."
              echo "4. **Get Support**: Visit the [Docker Community](https://www.docker.com/community/) for help."
              echo ""
              echo "**[📘 View Full Documentation](https://docs.docker.com)** | **[📩 Submit Feedback](https://github.com/docker/docker.github.io/issues)**"
              echo ""
              echo "> **Note**: Always download from official sources to ensure security and compatibility. 🙌 **Thank you for using Docker!**"
            } > "$release_note_file"

            echo "--- Generated Release Notes (Content below will be in the GitHub Release) ---"
            cat "$release_note_file"
            echo "--- End of Release Notes ---"
          }
          generate_release_notes

      - name: Create Release
        id: release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: "latest"
          name: "Docker Installers - Latest Available (Engine v${{ env.version }})"
          body_path: release_notes.md
          files: |
            installers/docker_install.sh
            installers/docker-${{ env.version }}.tgz
            installers/docker_desktop_installer_windows_x86_64.exe
            installers/docker_desktop_installer_mac_arm64.dmg
            installers/docker_desktop_installer_mac_x86_64.dmg
            installers/docker_desktop_installer_linux_debian_x86_64.deb
            installers/docker_desktop_installer_linux_fedora_x86_64.rpm
            installers/docker_desktop_installer_linux_ubuntu_x86_64.deb
            installers/docker_desktop_installer_linux_centos_x86_64.rpm
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Output Release Notes
        run: |
          set -euf -o pipefail
          echo "Final Release Notes Content (from file):"
          if [ -f "release_notes.md" ]; then
             cat "release_notes.md"
          else
             echo "Warning: release_notes.md not found."
          fi
        continue-on-error: true
