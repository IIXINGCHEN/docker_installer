# .github/workflows/docker_installer_workflow.yml
name: Docker Installer Workflow

on:
  schedule:
    - cron: '0 16 * * *'
  workflow_dispatch: {}

jobs:
  download_and_verify:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up environment
        run: |
          set -euf -o pipefail
          sudo apt-get update -y
          sudo apt-get install -y curl

      - name: Retrieve Latest Docker Version
        id: get_latest_version
        run: |
          set -euf -o pipefail
          latest_version=$(curl -s https://download.docker.com/linux/static/stable/x86_64/ | grep -oP 'docker-\K[0-9]+\.[0-9]+\.[0-9]+' | sort -V | tail -n 1)
          if [ -z "$latest_version" ]; then
            echo "Error: No stable Docker version found, exiting."
            exit 1
          fi
          echo "Latest stable Docker version: $latest_version"
          echo "version=$latest_version" >>$GITHUB_ENV

      - name: Download Docker Installers
        run: |
          set -euf -o pipefail
          INSTALLER_DIR="installers"
          mkdir -p "$INSTALLER_DIR"
          
          declare -A installers=(
            ["windows_x86_64"]="https://desktop.docker.com/win/stable/amd64/Docker%20Desktop%20Installer.exe"
            ["mac_arm64"]="https://desktop.docker.com/mac/stable/arm64/Docker.dmg"
            ["mac_x86_64"]="https://desktop.docker.com/mac/stable/amd64/Docker.dmg"
            ["linux_debian_x86_64"]="https://desktop.docker.com/linux/main/amd64/docker-desktop-latest-amd64.deb"
            ["linux_fedora_x86_64"]="https://desktop.docker.com/linux/main/amd64/docker-desktop-latest-x86_64.rpm"
            ["linux_ubuntu_x86_64"]="https://desktop.docker.com/linux/main/amd64/docker-desktop-latest-amd64.deb"
            ["linux_centos_x86_64"]="https://desktop.docker.com/linux/main/amd64/docker-desktop-latest-x86_64.rpm"
          )
          
          for key in "${!installers[@]}"; do
            url="${installers[$key]}"
            extension="${url##*.}"
            file_name="docker_desktop_installer_${key}.${extension}"
            file_path="$INSTALLER_DIR/$file_name"
            
            echo "正在从 $url 下载 $file_name"
            curl -L -o "$file_path" "$url" || { echo "错误：下载 $file_name 失败"; exit 1; }
            
            if [ ! -s "$file_path" ]; then
              echo "错误：$file_name 下载失败或文件为空"
              exit 1
            fi
            echo "$file_name 下载成功."
          done

      - name: Download Docker Installation Script
        run: |
          set -euf -o pipefail
          INSTALLER_DIR="installers"
          mkdir -p "$INSTALLER_DIR"
          SCRIPT_URL="https://get.docker.com"
          SCRIPT_FILE_NAME="docker_install.sh"
          SCRIPT_FILE_PATH="$INSTALLER_DIR/$SCRIPT_FILE_NAME"
          echo "正在下载 Docker 安装脚本 $SCRIPT_URL 到 $SCRIPT_FILE_PATH"
          curl -sL -o "$SCRIPT_FILE_PATH" "$SCRIPT_URL" || { echo "错误：下载 $SCRIPT_FILE_NAME 失败"; exit 1; }
          echo "$SCRIPT_FILE_NAME 下载成功."

      - name: Download Docker Engine Static Binary (Linux x86_64)
        run: |
          set -euf -o pipefail
          INSTALLER_DIR="installers"
          ENGINE_VERSION="${{ env.version }}"
          
          if [ -z "$ENGINE_VERSION" ]; then
            echo "错误：Docker引擎版本 (env.version) 未获取到，无法下载静态二进制包。"
            exit 1
          fi
          
          STATIC_BINARY_FILE_NAME="docker-${ENGINE_VERSION}.tgz"
          STATIC_BINARY_URL="https://download.docker.com/linux/static/stable/x86_64/${STATIC_BINARY_FILE_NAME}"
          
          mkdir -p "$INSTALLER_DIR"
          echo "正在下载 Docker 引擎静态二进制包: $STATIC_BINARY_URL"
          curl -L -o "$INSTALLER_DIR/$STATIC_BINARY_FILE_NAME" "$STATIC_BINARY_URL" || { echo "错误：下载 $STATIC_BINARY_FILE_NAME 失败"; exit 1; }
          
          if [ ! -s "$INSTALLER_DIR/$STATIC_BINARY_FILE_NAME" ]; then
            echo "错误：$STATIC_BINARY_FILE_NAME 下载失败或文件为空"
            exit 1
          fi
          echo "$STATIC_BINARY_FILE_NAME 下载成功到 $INSTALLER_DIR/."

      - name: Prepare Release Notes
        run: |
          set -euf -o pipefail
          generate_release_notes() {
            INSTALLER_DIR="installers"
            local release_note_file="release_notes.md"
            local engine_version_from_env="${{ env.version }}" 
            local engine_version_display="v${engine_version_from_env}"

            local file_count
            file_count=$(find "$INSTALLER_DIR" -maxdepth 1 -type f | wc -l)

            local file_asset_blocks_en=""
            local file_asset_blocks_zh=""
            local current_description=""

            # 使用进程替换来确保while循环在当前shell上下文中运行
            while IFS= read -r -d $'\0' file_path_in_loop; do
              local filename
              filename=$(basename "$file_path_in_loop")
              local size
              size=$(du -h "$file_path_in_loop" | cut -f1)
              local modified_date
              modified_date=$(stat -c %y "$file_path_in_loop" | cut -d'.' -f1)
              local sha256_hash
              sha256_hash=$(sha256sum "$file_path_in_loop" | cut -d' ' -f1)

              case "$filename" in
                "docker_install.sh")
                  current_description="Docker Engine Installation Script (Generic Linux)" ;;
                "docker-${engine_version_from_env}.tgz")
                  current_description="Docker Engine Static Binary ${engine_version_display} (Linux x86_64)" ;;
                "docker_desktop_installer_windows_x86_64.exe")
                  current_description="Docker Desktop for Windows (x86_64)" ;;
                "docker_desktop_installer_mac_arm64.dmg")
                  current_description="Docker Desktop for macOS (Apple Silicon, arm64)" ;;
                "docker_desktop_installer_mac_x86_64.dmg")
                  current_description="Docker Desktop for macOS (Intel, x86_64)" ;;
                "docker_desktop_installer_linux_debian_x86_64.deb"|\
                "docker_desktop_installer_linux_ubuntu_x86_64.deb")
                  current_description="Docker Desktop for Linux (Debian/Ubuntu based, .deb)" ;;
                "docker_desktop_installer_linux_fedora_x86_64.rpm"|\
                "docker_desktop_installer_linux_centos_x86_64.rpm")
                  current_description="Docker Desktop for Linux (Fedora/RHEL based, .rpm)" ;;
                *)
                  current_description="Utility or Installer File" ;;
              esac
              
              file_asset_blocks_en+=$(printf "#### \`%s\`\n* **Description:** %s\n* **Size:** %s\n* **SHA256:** \`%s\`\n* **Last Modified (UTC):** %s\n\n---\n" \
                                      "$filename" "$current_description" "$size" "$sha256_hash" "$modified_date")
              file_asset_blocks_zh+=$(printf "#### \`%s\`\n* **文件说明：** %s\n* **文件大小：** %s\n* **SHA256 校验和：** \`%s\`\n* **最后修改日期 (UTC)：** %s\n\n---\n" \
                                      "$filename" "$current_description" "$size" "$sha256_hash" "$modified_date")
            done < <(find "$INSTALLER_DIR" -maxdepth 1 -type f -print0)

            {
              echo "## 🐳 Docker Installers / Docker 安装程序 - Engine ${engine_version_display} 🚀"
              echo "" 
              echo "This document provides download links for various Docker installers and tools, fetched from official sources. The Docker Engine version reference above applies to the static binary and the \`get.docker.com\` script."
              echo "本文档提供了各 Docker 安装程序和工具的下载链接，均从官方源获取。上述 Docker 引擎版本号适用于静态二进制包及 \`get.docker.com\` 脚本。"
              echo ""
              echo "---" 
              echo "## 🇬🇧 English Section"
              echo ""
              echo "### Introduction" 
              echo "This release provides the latest available Docker installers and tools, fetched directly from their official sources. For enhanced security, please verify the SHA256 checksums listed below before installation. 💡" 
              echo ""
              echo "### Assets (Count: ${file_count})"
              echo ""
              echo -e "${file_asset_blocks_en}"
              echo "### Notes" 
              echo "🔗 For more information, please visit the [Docker Official Documentation](https://docs.docker.com)."
              echo "🙌 Thank you for using Docker!"
              echo ""
              echo "---" 
              echo "## 🇨🇳 中文说明"
              echo ""
              echo "### 简介" 
              echo "此版本提供了从官方来源获取的最新可用 Docker 安装程序和工具。为增强安全性，请在安装前校验下方列出的 SHA256 校验和。💡" 
              echo ""
              echo "### 资产文件 (数量: ${file_count})"
              echo ""
              echo -e "${file_asset_blocks_zh}"
              echo "### 备注" 
              echo "🔗 获取更多信息，请访问 [Docker 官方文档](https://docs.docker.com)。"
              echo "🙌 感谢您使用 Docker！"
            } > "$release_note_file"

            echo "--- Generated Release Notes (Content below will be in the GitHub Release) ---" 
            cat "$release_note_file" 
            echo "--- End of Release Notes ---" 
          }
          generate_release_notes

      - name: Create Release
        id: release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: "latest"
          name: "Docker Installers - Latest Available (Engine v${{ env.version }})"
          body_path: release_notes.md
          files: |
            installers/docker_install.sh
            installers/docker-${{ env.version }}.tgz
            installers/docker_desktop_installer_windows_x86_64.exe
            installers/docker_desktop_installer_mac_arm64.dmg
            installers/docker_desktop_installer_mac_x86_64.dmg
            installers/docker_desktop_installer_linux_debian_x86_64.deb
            installers/docker_desktop_installer_linux_fedora_x86_64.rpm
            installers/docker_desktop_installer_linux_ubuntu_x86_64.deb
            installers/docker_desktop_installer_linux_centos_x86_64.rpm
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Output Release Notes
        run: |
          set -euf -o pipefail
          echo "Final Release Notes Content (from file):"
          if [ -f "release_notes.md" ]; then
             cat "release_notes.md"
          else
             echo "Warning: release_notes.md not found."
          fi
        continue-on-error: true
