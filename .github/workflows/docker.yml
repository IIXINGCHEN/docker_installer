name: Docker Installer Download  # 工作流名称

on:
  workflow_dispatch:  # 允许手动触发工作流
  schedule:  # 定时触发工作流
    - cron: '0 16 * * *'  # 每天 UTC 时间 16:00 运行

permissions:
  contents: write  # 允许写入内容
  packages: write  # 允许写入包

jobs:
  download_installer:  # 作业名称
    runs-on: ubuntu-latest  # 运行环境

    steps:
      - name: Checkout repository  # 检出代码库
        uses: actions/checkout@v4  # 使用 GitHub 提供的检出行动

      - name: Set up environment  # 设置环境
        run: |
          sudo apt-get update -y  # 更新包列表
          sudo apt-get install -y curl jq || { echo "Failed to install required packages"; exit 1; }  # 安装所需的包

      - name: Check curl installation  # 检查 curl 是否安装
        run: |
          command -v curl &> /dev/null || { echo "curl is not installed. Attempting to install."; sudo apt-get install -y curl || { echo "curl installation failed, exiting!"; exit 1; }; }

      - name: Retrieve Latest Docker Version  # 获取最新 Docker 版本
        id: get_latest_version  # 设置此步骤的 ID
        run: |
          # 获取最新的 LTS Docker 版本
          latest_version=$(curl -sL https://download.docker.com/linux/static/stable/x86_64/ | 
            grep -oP 'docker-\K[0-9]+\.[0-9]+\.[0-9]+' | 
            sort -V | 
            tail -n 1)  # 从 Docker 的下载页面获取最新版本号

          if [ -z "$latest_version" ]; then  # 检查是否获取到版本号
            echo "No stable Docker version found, exiting."
            exit 1
          fi

          echo "Latest stable Docker version: $latest_version"  # 输出最新版本号
          echo "version=$latest_version" >> $GITHUB_ENV  # 将版本号保存到环境变量中

      - name: Download desktop installers  # 下载桌面安装程序
        run: |
          declare -A installers  # 声明一个关联数组
          installers=(
            ["windows_x86_64"]="https://desktop.docker.com/win/stable/amd64/Docker%20Desktop%20Installer.exe"
            ["mac_arm64"]="https://desktop.docker.com/mac/stable/arm64/Docker.dmg"
            ["mac_x86_64"]="https://desktop.docker.com/mac/stable/amd64/Docker.dmg"
            ["linux_debian_x86_64"]="https://desktop.docker.com/linux/main/amd64/docker-desktop-latest-amd64.deb"
            ["linux_fedora_x86_64"]="https://desktop.docker.com/linux/main/amd64/docker-desktop-latest-x86_64.rpm"
            ["linux_ubuntu_x86_64"]="https://desktop.docker.com/linux/main/amd64/docker-desktop-latest-amd64.deb"
            ["linux_centos_x86_64"]="https://desktop.docker.com/linux/main/amd64/docker-desktop-latest-amd64.rpm"
          )
          
          # 循环遍历安装程序
          for key in "${!installers[@]}"; do
            file_name="docker_desktop_installer_${key}"  # 构造文件名
            case "$key" in
              "linux_debian_x86_64") file_name+=".deb" ;;  # Debian 系统
              "linux_fedora_x86_64") file_name+=".rpm" ;;  # Fedora 系统
              "linux_ubuntu_x86_64") file_name+=".deb" ;;  # Ubuntu 系统
              "linux_centos_x86_64") file_name+=".rpm" ;;  # CentOS 系统
              "mac_arm64"|"mac_x86_64") file_name+=".dmg" ;;  # Mac 系统
              "windows_x86_64") file_name+=".exe" ;;  # Windows 系统
              *) echo "Unknown key: $key"; exit 1 ;;  # 未知平台处理
            esac
            
            echo "Downloading $file_name from ${installers[$key]}"  # 输出下载信息
            if ! curl -L -o "$file_name" "${installers[$key]}"; then  # 下载文件
              echo "Failed to download $file_name"; 
              exit 1; 
            fi
            
            # 检查下载文件的完整性
            if [ ! -f "$file_name" ] || [ ! -s "$file_name" ]; then  # 检查文件是否存在且非空
              echo "$file_name does not exist or is empty after download"; 
              exit 1; 
            fi
          done

      - name: Download Docker installation script  # 下载 Docker 安装脚本
        run: |
          if ! curl -o docker_install.sh "https://get.docker.com"; then  # 下载脚本
            echo "Failed to download docker_install.sh"; 
            exit 1; 
          fi

      - name: Prepare Release Notes  # 准备发布说明
        run: |
          for lang in "" "_zh"; do  # 创建英文和中文发布说明
            file_suffix=${lang:-""}
            release_note_file="release_notes${file_suffix}.md"  # 定义发布说明文件名
            
            echo "Docker Installer Latest LTS Stable Version ${{ env.version }}" > "$release_note_file"  # 写入版本信息
            echo "" >> "$release_note_file"  # 添加空行

            # 遍历所有下载的文件
            for file in docker_desktop_installer_*.* docker_install.sh; do  
              if [ -f "$file" ]; then  # 检查文件是否存在
                size=$(du -h "$file" | cut -f1)  # 获取文件大小
                modified_date=$(date -r "$file" '+%Y-%m-%d %H:%M:%S')  # 获取文件修改日期
                
                # 写入文件信息到发布说明
                {
                  echo "$file"   # 写入文件名
                  echo "$size"   # 写入文件大小
                  echo "$modified_date"  # 写入文件修改日期
                  echo ""  # 添加空行
                } >> "$release_note_file"
              fi
            done
            
            cat "$release_note_file"  # 输出发布说明文件内容
          done

      - name: Create Release  # 创建发布
        id: release  # 设置此步骤的 ID
        uses: softprops/action-gh-release@v2  # 使用 GitHub release 行动
        with:
          tag_name: "latest"  # 发布标签名称
          name: "Docker Installer Latest LTS Stable Version ${{ env.version }}"  # 发布名称
          body_path: release_notes.md  # 发布说明文件路径
          files: |  # 包含的文件列表
            docker_install.sh
            docker_desktop_installer_windows_x86_64.exe
            docker_desktop_installer_mac_arm64.dmg
            docker_desktop_installer_mac_x86_64.dmg
            docker_desktop_installer_linux_debian_x86_64.deb
            docker_desktop_installer_linux_fedora_x86_64.rpm
            docker_desktop_installer_linux_ubuntu_x86_64.deb
            docker_desktop_installer_linux_centos_x86_64.rpm
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # GitHub Token

      - name: Output Release Notes  # 输出发布说明
        run: cat release_notes.md  # 打印发布说明内容
        continue-on-error: true  # 确保即使输出失败也不终止工作流
