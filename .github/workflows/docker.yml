name: Docker Installer Download

on:
  workflow_dispatch:
  schedule:
    - cron: '0 16 * * *'  # 每天 UTC 时间 00:00 运行

permissions:
  contents: write
  packages: write

jobs:
  download_installer:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up environment
        run: |
          sudo apt-get update -y
          sudo apt-get install -y curl jq || { echo "Failed to install required packages"; exit 1; }

      - name: Check curl installation
        run: |
          if ! command -v curl &> /dev/null; then
            echo "curl is not installed. Attempting to install." 
            sudo apt-get install -y curl || { echo "curl installation failed, exiting!" ; exit 1; }
          fi

      - name: Delete old release (latest)
        run: |
          echo "Deleting old release tagged as latest"
          release_response=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/releases/tags/latest)
          release_id=$(echo "$release_response" | jq -r .id)

          if [ "$release_id" != "null" ]; then
            curl -s -X DELETE -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              https://api.github.com/repos/${{ github.repository }}/releases/$release_id
            echo "Old release tagged as latest deleted."
          else
            echo "No release tagged as latest found."
          fi

      - name: Retrieve Latest Docker Version
        id: get_latest_version
        run: |
          # 获取最新的 LTS Docker 版本
          latest_version=$(curl -sL https://download.docker.com/linux/static/stable/x86_64/ | 
            grep -oP 'docker-\K[0-9]+\.[0-9]+\.[0-9]+' | 
            sort -V | 
            tail -n 1)

          if [ -z "$latest_version" ]; then
            echo "No stable Docker version found, exiting."
            exit 1
          fi
          echo "Latest stable Docker version: $latest_version"
          echo "version=$latest_version" >> $GITHUB_ENV

      - name: Download desktop installers
        run: |
          declare -A installers
          installers=(
            ["windows_x86_64"]="https://desktop.docker.com/win/stable/amd64/Docker%20Desktop%20Installer.exe"
            ["mac_arm64"]="https://desktop.docker.com/mac/stable/arm64/Docker.dmg"
            ["mac_x86_64"]="https://desktop.docker.com/mac/stable/amd64/Docker.dmg"
            ["linux_debian_x86_64"]="https://desktop.docker.com/linux/main/amd64/docker-desktop-latest-amd64.deb"
            ["linux_fedora_x86_64"]="https://desktop.docker.com/linux/main/amd64/docker-desktop-latest-x86_64.rpm"
          )
          
          for key in "${!installers[@]}"; do
            file_name="docker_desktop_installer_${key}"
            case "$key" in
              "linux_debian_x86_64") file_name+=".deb" ;;
              "linux_fedora_x86_64") file_name+=".rpm" ;;
              "mac_arm64"|"mac_x86_64") file_name+=".dmg" ;;
              "windows_x86_64") file_name+=".exe" ;;
              *) echo "Unknown key: $key"; exit 1 ;;
            esac
            
            echo "Downloading $file_name from ${installers[$key]}"
            curl -L -o "$file_name" "${installers[$key]}" || {
              echo "Failed to download $file_name"; 
              exit 1; 
            }

            if [ ! -f "$file_name" ]; then
              echo "$file_name does not exist after download"; 
              exit 1; 
            fi
          done

      - name: Download Docker shell script
        run: |
          curl -o docker_install.sh "https://get.docker.com" || {
            echo "Failed to download docker_install.sh"; 
            exit 1; 
          }

      - name: Prepare Release Notes
        run: |
          echo "Docker Installer Latest LTS Stable Version ${{ env.version }}" > release_notes.md
          echo "" >> release_notes.md
          for file in docker_desktop_installer_*.* docker_install.sh; do
            if [ -f "$file" ]; then
              size=$(du -h "$file" | cut -f1)
              echo "$file" >> release_notes.md
              echo "$size" >> release_notes.md
              echo "$(date -r "$file" '+%Y-%m-%d %H:%M:%S')" >> release_notes.md
              echo "" >> release_notes.md
            fi
          done
          cat release_notes.md

      - name: Create Release
        id: release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: "latest"
          name: "Docker Installer Latest LTS Stable Version ${{ env.version }}"
          body_path: release_notes.md
          files: |
            docker_install.sh
            docker_desktop_installer_windows_x86_64.exe
            docker_desktop_installer_mac_arm64.dmg
            docker_desktop_installer_mac_x86_64.dmg
            docker_desktop_installer_linux_debian_x86_64.deb
            docker_desktop_installer_linux_fedora_x86_64.rpm
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Output Release Notes
        run: cat release_notes.md
