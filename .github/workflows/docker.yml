name: Docker Installer Download

on:
  workflow_dispatch:  # 手动触发
  schedule:
    - cron: '0 */6 * * *'  # 每6小时运行一次，增加更新频率
  push:
    tags:
      - 'v*'  # 当推送版本标签时触发

env:
  MAX_RETRIES: 3
  RETRY_DELAY: 10
  CACHE_TTL: 86400  # 缓存有效期（24小时）

permissions:
  contents: write
  packages: write

jobs:
  download_installer:
    runs-on: ubuntu-latest
    timeout-minutes: 30  # 设置任务超时时间

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1  # 优化克隆深度

      - name: Set up environment
        run: |
          sudo apt-get update -y
          sudo apt-get install -y curl jq wget
          mkdir -p logs  # 创建日志目录

      - name: Setup logging
        run: |
          exec 1> >(tee -a "logs/workflow.log")
          exec 2> >(tee -a "logs/workflow.error.log")
          echo "::group::Environment Information"
          echo "Workflow started at: $(date '+%Y-%m-%d %H:%M:%S')"
          echo "Runner OS: $RUNNER_OS"
          echo "::endgroup::"

      - name: Retrieve Latest Docker Version
        id: get_latest_version
        run: |
          attempt=1
          max_attempts=$MAX_RETRIES
          
          while [ $attempt -le $max_attempts ]; do
            echo "尝试获取 Docker 版本 (attempt $attempt/$max_attempts)"
            
            latest_version=$(curl -sL --retry 3 --retry-delay 5 https://download.docker.com/linux/static/stable/x86_64/ | 
              grep -oP 'docker-\K[0-9]+\.[0-9]+\.[0-9]+' | 
              sort -V | 
              tail -n 1)
            
            if [ -n "$latest_version" ]; then
              echo "version=$latest_version" >>$GITHUB_ENV
              echo "DOCKER_VERSION=$latest_version" >>$GITHUB_OUTPUT
              echo "成功获取最新 Docker 版本: $latest_version"
              break
            fi
            
            attempt=$((attempt + 1))
            if [ $attempt -le $max_attempts ]; then
              echo "等待 $RETRY_DELAY 秒后重试..."
              sleep $RETRY_DELAY
            fi
          done
          
          if [ -z "$latest_version" ]; then
            echo "错误：无法获取 Docker 版本"
            exit 1
          fi

      - name: Validate Version Format
        run: |
          if ! [[ ${{ env.version }} =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "错误：无效的版本格式: ${{ env.version }}"
            exit 1
          fi

      - name: Restore Installers Cache
        id: cache-restore
        uses: actions/cache@v3
        with:
          path: installers/
          key: docker-installers-${{ env.version }}-${{ github.sha }}
          restore-keys: |
            docker-installers-${{ env.version }}-
            docker-installers-

      - name: Define Common Functions
        run: |
          # 定义下载函数
          download_with_retry() {
            local url="$1"
            local output="$2"
            local attempts=1
            
            while [ $attempts -le $MAX_RETRIES ]; do
              echo "下载 $output (尝试 $attempts/$MAX_RETRIES)"
              if curl -L --retry 3 --retry-delay 5 -o "$output" "$url"; then
                if [ -s "$output" ]; then
                  echo "✓ 成功下载: $output"
                  return 0
                fi
              fi
              
              attempts=$((attempts + 1))
              if [ $attempts -le $MAX_RETRIES ]; then
                echo "等待 $RETRY_DELAY 秒后重试..."
                sleep $RETRY_DELAY
              fi
            done
            
            echo "× 下载失败: $output"
            return 1
          }
          # 导出函数使其对后续步骤可用
          export -f download_with_retry

      - name: Download Docker Installers
        run: |
          INSTALLER_DIR="installers"
          mkdir -p "$INSTALLER_DIR"
          
          # 定义安装包映射
          declare -A installers=(
            ["windows_x86_64"]="https://desktop.docker.com/win/stable/amd64/Docker%20Desktop%20Installer.exe"
            ["mac_arm64"]="https://desktop.docker.com/mac/stable/arm64/Docker.dmg"
            ["mac_x86_64"]="https://desktop.docker.com/mac/stable/amd64/Docker.dmg"
            ["linux_debian_x86_64"]="https://desktop.docker.com/linux/main/amd64/docker-desktop-latest-amd64.deb"
            ["linux_fedora_x86_64"]="https://desktop.docker.com/linux/main/amd64/docker-desktop-latest-x86_64.rpm"
            ["linux_ubuntu_x86_64"]="https://desktop.docker.com/linux/main/amd64/docker-desktop-latest-amd64.deb"
            ["linux_centos_x86_64"]="https://desktop.docker.com/linux/main/amd64/docker-desktop-latest-amd64.rpm"
          )
          
          # 下载所有安装包
          failed_downloads=0
          for key in "${!installers[@]}"; do
            url="${installers[$key]}"
            extension="${url##*.}"
            file_name="docker_desktop_installer_${key}.${extension}"
            file_path="$INSTALLER_DIR/$file_name"
            
            if [ -f "$file_path" ] && [ $(( $(date +%s) - $(stat -c %Y "$file_path") )) -lt $CACHE_TTL ]; then
              echo "√ 使用缓存: $file_name"
              continue
            fi
            
            if ! download_with_retry "$url" "$file_path"; then
              failed_downloads=$((failed_downloads + 1))
              echo "::error::下载失败: $file_name"
              continue
            fi
          done
          
          if [ $failed_downloads -gt 0 ]; then
            echo "::warning::$failed_downloads 个文件下载失败"
            exit 1
          fi

      - name: Download and Verify Docker Installation Script
        run: |
          SCRIPT_URL="https://get.docker.com"
          SCRIPT_FILE="docker_install.sh"
          
          if ! download_with_retry "$SCRIPT_URL" "$SCRIPT_FILE"; then
            echo "::error::Docker 安装脚本下载失败"
            exit 1
          fi
          
          # 验证脚本
          if [ ! -s "$SCRIPT_FILE" ]; then
            echo "::error::安装脚本为空"
            exit 1
          fi
          
          chmod +x "$SCRIPT_FILE"
          
          # 基本内容验证
          if ! grep -q "docker" "$SCRIPT_FILE"; then
            echo "::error::无效的 Docker 安装脚本"
            exit 1
          fi
          
          echo "✓ Docker 安装脚本验证成功"

      - name: Generate Release Notes
        run: |
          generate_release_notes() {
            local lang_suffix="$1"
            local release_note_file="release_notes${lang_suffix}.md"
            local title="Docker Installer Latest LTS Stable Version"
            local footer_en="Thank you for using Docker! For support, visit https://docs.docker.com"
            local footer_zh="感谢使用 Docker！如需帮助，请访问 https://docs.docker.com"
            
            {
              echo "# $title"
              echo ""
              echo "**Version:** v${{ env.version }}"
              echo "**Release Date:** $(date '+%Y-%m-%d %H:%M:%S')"
              echo ""
              echo "## System Requirements"
              echo "- Windows 10/11 64-bit: Pro, Enterprise, or Education"
              echo "- macOS 10.15 or newer"
              echo "- Linux: Kernel 4.0 or newer"
              echo ""
              echo "## Files"
              echo "| File Name | Size | SHA256 |"
              echo "|-----------|------|--------|"
              
              for file in installers/docker_desktop_installer_*.* docker_install.sh; do
                if [ -f "$file" ]; then
                  size=$(du -h "$file" | cut -f1)
                  sha256=$(sha256sum "$file" | cut -d' ' -f1)
                  echo "| $(basename "$file") | $size | ${sha256:0:16}... |"
                fi
              done
              
              echo ""
              if [ "$lang_suffix" = "_zh" ]; then
                echo "$footer_zh"
              else
                echo "$footer_en"
              fi
            } > "$release_note_file"
          }
          
          generate_release_notes ""
          generate_release_notes "_zh"

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: "v${{ env.version }}"
          name: "Docker Installer v${{ env.version }}"
          body_path: release_notes.md
          files: |
            docker_install.sh
            installers/docker_desktop_installer_*.{exe,dmg,deb,rpm}
          draft: false
          prerelease: false
          fail_on_unmatched_files: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: workflow-logs
          path: logs/
          retention-days: 7

      - name: Cleanup
        if: always()
        run: |
          rm -rf installers/
          rm -f docker_install.sh
          echo "清理完成"
