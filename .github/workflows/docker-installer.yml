name: Docker 安装程序工作流

on:
  workflow_dispatch:
  schedule:
    - cron: '0 16 * * *'  # 每天16:00 UTC

jobs:
  download_and_verify:
    runs-on: ubuntu-latest

    steps:
      - name: 检出仓库
        uses: actions/checkout@v4

      - name: 设置环境
        run: |
          sudo apt-get update -y
          sudo apt-get install -y curl jq

      - name: 获取最新 Docker LTS 版本
        id: get_latest_version
        run: |
          # 从 Docker 的静态稳定页面获取最新 LTS 版本
          latest_version=$(curl -s https://download.docker.com/linux/static/stable/x86_64/ | grep -oP 'docker-\K[0-9]+\.[0-9]+\.[0-9]+' | sort -V | tail -n 1)
          if [ -z "$latest_version" ]; then
            echo "未找到稳定的 Docker LTS 版本，退出。"
            exit 1
          fi
          echo "最新稳定的 Docker LTS 版本: $latest_version"
          echo "version=$latest_version" >>$GITHUB_ENV

      - name: 恢复安装程序缓存
        uses: actions/cache@v3
        with:
          path: installers/
          key: docker-installers-${{ env.version }}
          restore-keys: |
            docker-installers-

      - name: 下载 Docker 安装程序
        run: |
          INSTALLER_DIR="installers"
          mkdir -p "$INSTALLER_DIR"
          declare -A installers=(
            ["windows_x86_64"]="https://desktop.docker.com/win/stable/amd64/Docker%20Desktop%20Installer.exe"
            ["mac_arm64"]="https://desktop.docker.com/mac/stable/arm64/Docker.dmg"
            ["mac_x86_64"]="https://desktop.docker.com/mac/stable/amd64/Docker.dmg"
            ["linux_debian_x86_64"]="https://download.docker.com/linux/debian/dists/stable/pool/stable/amd64/docker-ce_${{ env.version }}~3-0~debian-bullseye_amd64.deb"
            ["linux_fedora_x86_64"]="https://download.docker.com/linux/fedora/37/x86_64/stable/Packages/docker-ce-${{ env.version }}.fc37.x86_64.rpm"
            ["linux_ubuntu_x86_64"]="https://download.docker.com/linux/ubuntu/dists/stable/pool/stable/amd64/docker-ce_${{ env.version }}~3-0~ubuntu-jammy_amd64.deb"
            ["linux_centos_x86_64"]="https://download.docker.com/linux/centos/7/x86_64/stable/Packages/docker-ce-${{ env.version }}.ce-1.el7.x86_64.rpm"
          )
          for key in "${!installers[@]}"; do
            url="${installers[$key]}"
            extension="${url##*.}"
            file_name="docker_desktop_installer_${key}.${extension}"
            file_path="$INSTALLER_DIR/$file_name"
            if [ -f "$file_path" ]; then
              echo "$file_name 已存在于缓存中，跳过下载。"
              continue
            fi
            echo "正在从 $url 下载$file_name"
            curl -L -o "$file_path" "$url" || { echo "下载 $file_name 失败"; exit 1; }
            if [ ! -s "$file_path" ]; then
              echo "$file_name 下载失败或文件为空"
              exit 1
            fi
          done

      - name: 保存安装程序缓存
        uses: actions/cache@v3
        with:
          path: installers/
          key: docker-installers-${{ env.version }}

      - name: 下载 Docker 安装脚本
        run: |
          SCRIPT_URL="https://get.docker.com"
          SCRIPT_FILE="docker_install.sh"
          echo "正在下载 Docker 安装脚本 $SCRIPT_URL"
          curl -sL -o "$SCRIPT_FILE" "$SCRIPT_URL" || { echo "下载 $SCRIPT_FILE 失败"; exit 1; }

      - name: 获取 Docker 更新日志
        id: fetch_changelog
        run: |
          # 从 Docker 的 GitHub 发布页面获取更新日志
          changelog_url="https://api.github.com/repos/docker/docker-ce/releases/tags/v${{ env.version }}"
          changelog=$(curl -s "$changelog_url" | jq -r '.body')
          if [ -z "$changelog" ]; then
            echo "未找到版本 ${{ env.version }} 的更新日志。"
            echo "changelog=此版本无更新日志。" >>$GITHUB_ENV
          else
            echo "更新日志获取成功。"
            echo "changelog=$changelog" >>$GITHUB_ENV
          fi

      - name: 准备发布说明
        run: |
          generate_release_notes() {
            local release_note_file="release_notes.md"

            # 标题
            echo "# Docker 安装程序 - 最新 LTS 稳定版本 🚀" > "$release_note_file"
            echo "" >> "$release_note_file"
            echo "**版本:** v${{ env.version }}" >> "$release_note_file"
            echo "" >> "$release_note_file"

            # 介绍
            echo "欢迎使用最新版本的 Docker 安装程序。以下是适用于最新稳定 LTS 版本的安装程序。请在安装前验证校验和以确保完整性和安全性。💡" >> "$release_note_file"
            echo "" >> "$release_note_file"

            # 表格
            echo "| **文件名称** | **文件大小** | **修改日期** |" >> "$release_note_file"
            echo "|:-------------:|:-------------:|:-----------------:|" >> "$release_note_file"
            for file in installers/docker_desktop_installer_*.* docker_install.sh; do
              if [ -f "$file" ]; then
                size=$(du -h "$file" | cut -f1)
                modified_date=$(date -r "$file" '+%Y-%m-%d %H:%M:%S')
                echo "| \`$(basename "$file")\` | $size |$modified_date |" >> "$release_note_file"
              fi
            done
            echo "" >> "$release_note_file"

            # 更新日志
            echo "## 更新日志 📜" >> "$release_note_file"
            echo "" >> "$release_note_file"
            echo "${{ env.changelog }}" >> "$release_note_file"
            echo "" >> "$release_note_file"

            # 结束语
            echo "🔗 更多信息，请访问 [Docker 官方文档](https://docs.docker.com)。" >> "$release_note_file"
            echo "" >> "$release_note_file"
            echo "感谢您使用 Docker！如有任何问题或需要支持，请随时联系我们。🙌" >> "$release_note_file"
            
            # 显示生成的发布说明
            cat "$release_note_file"
          }
          generate_release_notes

      - name: 删除现有发布（如果存在）
        id: delete_release
        uses: actions/github-script@v6
        with:
          script: |
            const { data: releases } = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            const existingRelease = releases.find(release => release.tag_name === "latest");
            if (existingRelease) {
              await github.rest.repos.deleteRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: existingRelease.id,
              });
              console.log(`已删除标签为 "latest" 的现有发布。`);
            } else {
              console.log(`未找到标签为 "latest" 的现有发布。`);
            }

      - name: 创建发布
        id: release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: "latest"
          name: "Docker 安装程序 最新 LTS 稳定版本 ${{ env.version }}"
          body_path: release_notes.md
          files: |
            docker_install.sh
            installers/docker_desktop_installer_windows_x86_64.exe
            installers/docker_desktop_installer_mac_arm64.dmg
            installers/docker_desktop_installer_mac_x86_64.dmg
            installers/docker_desktop_installer_linux_debian_x86_64.deb
            installers/docker_desktop_installer_linux_fedora_x86_64.rpm
            installers/docker_desktop_installer_linux_ubuntu_x86_64.deb
            installers/docker_desktop_installer_linux_centos_x86_64.rpm
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 输出发布说明
        run: |
          cat release_notes.md
        continue-on-error: true
