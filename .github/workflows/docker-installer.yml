
name: Docker Installer Workflow

on:
  workflow_dispatch:
  schedule:
    - cron: '0 16 * * *'  # 每天16:00 UTC

jobs:
  download_and_verify:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up environment
        run: |
          sudo apt-get update -y
          sudo apt-get install -y curl jq

      - name: Retrieve Latest Docker LTS Version
        id: get_latest_version
        run: |
          # Fetch the latest LTS version from Docker's API
          latest_version=$(curl -s https://api.github.com/repos/docker/docker-ce/releases/latest | jq -r '.tag_name' | sed 's/v//')
          if [ -z "$latest_version" ]; then
            echo "No stable Docker LTS version found, exiting."
            exit 1
          fi
          echo "Latest stable Docker LTS version: $latest_version"
          echo "version=$latest_version" >>$GITHUB_ENV

      - name: Restore Installers Cache
        uses: actions/cache@v3
        with:
          path: installers/
          key: docker-installers-${{ env.version }}
          restore-keys: |
            docker-installers-

      - name: Download Docker Installers
        run: |
          INSTALLER_DIR="installers"
          mkdir -p "$INSTALLER_DIR"
          declare -A installers=(
            ["windows_x86_64"]="https://desktop.docker.com/win/stable/amd64/Docker%20Desktop%20Installer.exe"
            ["mac_arm64"]="https://desktop.docker.com/mac/stable/arm64/Docker.dmg"
            ["mac_x86_64"]="https://desktop.docker.com/mac/stable/amd64/Docker.dmg"
            ["linux_debian_x86_64"]="https://download.docker.com/linux/debian/dists/stable/pool/stable/amd64/docker-ce_${{ env.version }}~3-0~debian-bullseye_amd64.deb"
            ["linux_fedora_x86_64"]="https://download.docker.com/linux/fedora/37/x86_64/stable/Packages/docker-ce-${{ env.version }}.fc37.x86_64.rpm"
            ["linux_ubuntu_x86_64"]="https://download.docker.com/linux/ubuntu/dists/stable/pool/stable/amd64/docker-ce_${{ env.version }}~3-0~ubuntu-jammy_amd64.deb"
            ["linux_centos_x86_64"]="https://download.docker.com/linux/centos/7/x86_64/stable/Packages/docker-ce-${{ env.version }}.ce-1.el7.x86_64.rpm"
          )
          for key in "${!installers[@]}"; do
            url="${installers[$key]}"
            extension="${url##*.}"
            file_name="docker_desktop_installer_${key}.${extension}"
            file_path="$INSTALLER_DIR/$file_name"
            if [ -f "$file_path" ]; then
              echo "$file_name 已存在于缓存中，跳过下载。"
              continue
            fi
            echo "正在从 $url 下载$file_name"
            curl -L -o "$file_path" "$url" || { echo "下载 $file_name 失败"; exit 1; }
            if [ ! -s "$file_path" ]; then
              echo "$file_name 下载失败或文件为空"
              exit 1
            fi
          done

      - name: Save Installers Cache
        uses: actions/cache@v3
        with:
          path: installers/
          key: docker-installers-${{ env.version }}

      - name: Download Docker Installation Script
        run: |
          SCRIPT_URL="https://get.docker.com"
          SCRIPT_FILE="docker_install.sh"
          echo "正在下载 Docker 安装脚本 $SCRIPT_URL"
          curl -sL -o "$SCRIPT_FILE" "$SCRIPT_URL" || { echo "下载 $SCRIPT_FILE 失败"; exit 1; }

      - name: Prepare Release Notes
        run: |
          generate_release_notes() {
            local release_note_file="release_notes.md"

            # Header
            echo "# Docker Installer - Latest LTS Stable Version 🚀" > "$release_note_file"
            echo "" >> "$release_note_file"
            echo "**Version:** v${{ env.version }}" >> "$release_note_file"
            echo "" >> "$release_note_file"

            # Introduction
            echo "Welcome to the latest release of the Docker Installer. Below you'll find the installers for the latest stable LTS version. Ensure to verify checksums for integrity and security before installation. 💡" >> "$release_note_file"
            echo "" >> "$release_note_file"

            # Table with styling
            echo "| **File Name** | **File Size** | **Modified Date** |" >> "$release_note_file"
            echo "|:-------------:|:-------------:|:-----------------:|" >> "$release_note_file"
            for file in installers/docker_desktop_installer_*.* docker_install.sh; do
              if [ -f "$file" ]; then
                size=$(du -h "$file" | cut -f1)
                modified_date=$(date -r "$file" '+%Y-%m-%d %H:%M:%S')
                echo "| \`$(basename "$file")\` | $size |$modified_date |" >> "$release_note_file"
              fi
            done
            echo "" >> "$release_note_file"

            # Closing statement
            echo "🔗 For more information, please visit [Docker Official Documentation](https://docs.docker.com)." >> "$release_note_file"
            echo "" >> "$release_note_file"
            echo "Thank you for using Docker! Should you have any questions or need support, feel free to reach out to us. 🙌" >> "$release_note_file"
            
            # Show the generated release notes
            cat "$release_note_file"
          }
          generate_release_notes

      - name: Delete Existing Release (if any)
        id: delete_release
        uses: actions/github-script@v6
        with:
          script: |
            const { data: releases } = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            const existingRelease = releases.find(release => release.tag_name === "latest");
            if (existingRelease) {
              await github.rest.repos.deleteRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: existingRelease.id,
              });
              console.log(`Deleted existing release with tag "latest".`);
            } else {
              console.log(`No existing release found with tag "latest".`);
            }

      - name: Create Release
        id: release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: "latest"
          name: "Docker Installer Latest LTS Stable Version ${{ env.version }}"
          body_path: release_notes.md
          files: |
            docker_install.sh
            installers/docker_desktop_installer_windows_x86_64.exe
            installers/docker_desktop_installer_mac_arm64.dmg
            installers/docker_desktop_installer_mac_x86_64.dmg
            installers/docker_desktop_installer_linux_debian_x86_64.deb
            installers/docker_desktop_installer_linux_fedora_x86_64.rpm
            installers/docker_desktop_installer_linux_ubuntu_x86_64.deb
            installers/docker_desktop_installer_linux_centos_x86_64.rpm
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Output Release Notes
        run: |
          cat release_notes.md
        continue-on-error: true
