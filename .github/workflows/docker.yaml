name: Docker Installer Download

on:
  workflow_dispatch:
  schedule:
    - cron: '00 23 * * *'

permissions:
  contents: write

jobs:
  download_installer:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Get latest Docker version
      id: docker_version
      run: |
         DOCKER_VERSION=$(curl -s https://api.github.com/repos/docker/docker-ce/releases/latest | jq -r .tag_name)
         echo "DOCKER_VERSION=${DOCKER_VERSION}" >> $GITHUB_ENV

    - name: Get latest Docker Desktop for Windows version
      id: docker_desktop_windows_version
      run: |
         JSON_DATA=$(curl -s https://desktop.docker.com/win/main/amd64/stable.json)
         if [[ $? -ne 0 ]]; then
           echo "Failed to fetch Docker Desktop for Windows version"
           exit 1
         fi
         echo "JSON_DATA: $JSON_DATA"  # 调试信息
         DOCKER_DESKTOP_WINDOWS_VERSION=$(echo "$JSON_DATA" | jq -r '.versions[0].version')
         echo "DOCKER_DESKTOP_WINDOWS_VERSION=${DOCKER_DESKTOP_WINDOWS_VERSION}" >> $GITHUB_ENV

    - name: Get latest Docker Desktop for Mac (ARM64) version
      id: docker_desktop_mac_arm64_version
      run: |
         JSON_DATA=$(curl -s https://desktop.docker.com/mac/main/arm64/stable.json)
         if [[ $? -ne 0 ]]; then
           echo "Failed to fetch Docker Desktop for Mac (ARM64) version"
           exit 1
         fi
         echo "JSON_DATA: $JSON_DATA"  # 调试信息
         DOCKER_DESKTOP_MAC_ARM64_VERSION=$(echo "$JSON_DATA" | jq -r '.versions[0].version')
         echo "DOCKER_DESKTOP_MAC_ARM64_VERSION=${DOCKER_DESKTOP_MAC_ARM64_VERSION}" >> $GITHUB_ENV

    - name: Get latest Docker Desktop for Mac (x86_64) version
      id: docker_desktop_mac_x86_64_version
      run: |
         JSON_DATA=$(curl -s https://desktop.docker.com/mac/main/amd64/stable.json)
         if [[ $? -ne 0 ]]; then
           echo "Failed to fetch Docker Desktop for Mac (x86_64) version"
           exit 1
         fi
         echo "JSON_DATA: $JSON_DATA"  # 调试信息
         DOCKER_DESKTOP_MAC_X86_64_VERSION=$(echo "$JSON_DATA" | jq -r '.versions[0].version')
         echo "DOCKER_DESKTOP_MAC_X86_64_VERSION=${DOCKER_DESKTOP_MAC_X86_64_VERSION}" >> $GITHUB_ENV

    - name: Get latest Docker Desktop for Linux (Debian) version
      id: docker_desktop_linux_debian_version
      run: |
         JSON_DATA=$(curl -s https://desktop.docker.com/linux/main/amd64/stable.json)
         if [[ $? -ne 0 ]]; then
           echo "Failed to fetch Docker Desktop for Linux (Debian) version"
           exit 1
         fi
         echo "JSON_DATA: $JSON_DATA"  # 调试信息
         DOCKER_DESKTOP_LINUX_DEBIAN_VERSION=$(echo "$JSON_DATA" | jq -r '.versions[0].version')
         echo "DOCKER_DESKTOP_LINUX_DEBIAN_VERSION=${DOCKER_DESKTOP_LINUX_DEBIAN_VERSION}" >> $GITHUB_ENV

    - name: Get latest Docker Desktop for Linux (Fedora) version
      id: docker_desktop_linux_fedora_version
      run: |
         JSON_DATA=$(curl -s https://desktop.docker.com/linux/main/amd64/stable.json)
         if [[ $? -ne 0 ]]; then
           echo "Failed to fetch Docker Desktop for Linux (Fedora) version"
           exit 1
         fi
         echo "JSON_DATA: $JSON_DATA"  # 调试信息
         DOCKER_DESKTOP_LINUX_FEDORA_VERSION=$(echo "$JSON_DATA" | jq -r '.versions[0].version')
         echo "DOCKER_DESKTOP_LINUX_FEDORA_VERSION=${DOCKER_DESKTOP_LINUX_FEDORA_VERSION}" >> $GITHUB_ENV

    - name: Get latest Quay version
      id: quay_version
      run: |
         JSON_DATA=$(curl -s https://quay.io/api/v1/repository/quay/quay/tag/)
         if [[ $? -ne 0 ]]; then
           echo "Failed to fetch Quay version"
           exit 1
         fi
         echo "JSON_DATA: $JSON_DATA"  # 调试信息
         QUAY_VERSION=$(echo "$JSON_DATA" | jq -r '.tags[0].name')
         echo "QUAY_VERSION=${QUAY_VERSION}" >> $GITHUB_ENV

    - name: Get latest GCR version
      id: gcr_version
      run: |
         JSON_DATA=$(curl -s https://gcr.io/v2/google-containers/pause/tags/list)
         if [[ $? -ne 0 ]]; then
           echo "Failed to fetch GCR version"
           exit 1
         fi
         echo "JSON_DATA: $JSON_DATA"  # 调试信息
         GCR_VERSION=$(echo "$JSON_DATA" | jq -r '.tags[0]')
         echo "GCR_VERSION=${GCR_VERSION}" >> $GITHUB_ENV

    - name: Get latest K8S GCR version
      id: k8s_gcr_version
      run: |
         JSON_DATA=$(curl -s https://k8s.gcr.io/v2/google-containers/pause/tags/list)
         if [[ $? -ne 0 ]]; then
           echo "Failed to fetch K8S GCR version"
           exit 1
         fi
         echo "JSON_DATA: $JSON_DATA"  # 调试信息
         K8S_GCR_VERSION=$(echo "$JSON_DATA" | jq -r '.tags[0]')
         echo "K8S_GCR_VERSION=${K8S_GCR_VERSION}" >> $GITHUB_ENV

    - name: Get latest GHCR version
      id: ghcr_version
      run: |
         JSON_DATA=$(curl -s https://ghcr.io/v2/github/docs/actions/workflow-syntax-for-github-actions/tags/list)
         if [[ $? -ne 0 ]]; then
           echo "Failed to fetch GHCR version"
           exit 1
         fi
         echo "JSON_DATA: $JSON_DATA"  # 调试信息
         GHCR_VERSION=$(echo "$JSON_DATA" | jq -r '.tags[0]')
         echo "GHCR_VERSION=${GHCR_VERSION}" >> $GITHUB_ENV

    - name: Get latest Cloudsmith version
      id: cloudsmith_version
      run: |
         JSON_DATA=$(curl -s https://dl.cloudsmith.io/public/cloudsmith/stable/setup.deb.sh)
         if [[ $? -ne 0 ]]; then
           echo "Failed to fetch Cloudsmith version"
           exit 1
         fi
         echo "JSON_DATA: $JSON_DATA"  # 调试信息
         CLOUDSMITH_VERSION=$(echo "$JSON_DATA" | grep -oP 'version="\K[^"]+')
         echo "CLOUDSMITH_VERSION=${CLOUDSMITH_VERSION}" >> $GITHUB_ENV

    - name: Download Docker installers
      run: |
         curl -o install_docker.sh "https://get.docker.com"
         curl -o docker_desktop_installer_windows_x86_64.exe "https://desktop.docker.com/win/main/amd64/${{ env.DOCKER_DESKTOP_WINDOWS_VERSION }}/Docker%20Desktop%20Installer.exe"
         curl -o docker_desktop_installer_mac_arm64.dmg "https://desktop.docker.com/mac/main/arm64/${{ env.DOCKER_DESKTOP_MAC_ARM64_VERSION }}/Docker.dmg"
         curl -o docker_desktop_installer_mac_x86_64.dmg "https://desktop.docker.com/mac/main/amd64/${{ env.DOCKER_DESKTOP_MAC_X86_64_VERSION }}/Docker.dmg"
         curl -o docker_desktop_installer_linux_debian_x86_64.deb "https://desktop.docker.com/linux/main/amd64/${{ env.DOCKER_DESKTOP_LINUX_DEBIAN_VERSION }}/docker-desktop-${{ env.DOCKER_DESKTOP_LINUX_DEBIAN_VERSION }}-amd64.deb"
         curl -o docker_desktop_installer_linux_fedora_x86_64.rpm "https://desktop.docker.com/linux/main/amd64/${{ env.DOCKER_DESKTOP_LINUX_FEDORA_VERSION }}/docker-desktop-${{ env.DOCKER_DESKTOP_LINUX_FEDORA_VERSION }}-x86_64.rpm"

    - name: Download Quay installer
      run: |
         curl -o quay_installer.tar.gz "https://quay.io/repository/quay/quay/${{ env.QUAY_VERSION }}"

    - name: Download GCR installer
      run: |
         curl -o gcr_installer.tar.gz "https://gcr.io/google-containers/pause/${{ env.GCR_VERSION }}"

    - name: Download K8S GCR installer
      run: |
         curl -o k8s_gcr_installer.tar.gz "https://k8s.gcr.io/v2/google-containers/pause/manifests/${{ env.K8S_GCR_VERSION }}"

    - name: Download GHCR installer
      run: |
         curl -o ghcr_installer.tar.gz "https://ghcr.io/v2/github/docs/actions/workflow-syntax-for-github-actions/${{ env.GHCR_VERSION }}"

    - name: Download Cloudsmith installer
      run: |
         curl -o cloudsmith_installer.sh "https://dl.cloudsmith.io/public/cloudsmith/stable/setup.deb.sh"

    - name: Release
      uses: softprops/action-gh-release@v2
      with:
        files: |
          install_docker.sh
          docker_desktop_installer_windows_x86_64.exe
          docker_desktop_installer_mac_arm64.dmg
          docker_desktop_installer_mac_x86_64.dmg
          docker_desktop_installer_linux_debian_x86_64.deb
          docker_desktop_installer_linux_fedora_x86_64.rpm
          quay_installer.tar.gz
          gcr_installer.tar.gz
          k8s_gcr_installer.tar.gz
          ghcr_installer.tar.gz
          cloudsmith_installer.sh
        tag_name: latest
