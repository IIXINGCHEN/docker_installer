name: Docker Installer Release

on:
  workflow_dispatch:  # 允许手动触发工作流
  schedule:           # 定期运行工作流
    - cron: '0 16 * * *'  # 每天 UTC 时间 16:00 运行

permissions:
  contents: write      # 读取和写入仓库内容
  packages: write      # 发布包
  issues: write        # 创建讨论或问题（用于发布通知，可选）
  statuses: write      # 更新状态（可选）

env:
  INSTALLERS_DIR: installers  # 存储安装包的目录
  LATEST_VERSION: ${{ secrets.DOCKER_DESKTOP_VERSION }}

jobs:
  download_installers:
    name: Download Installers
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set Up Environment Variables
        run: |
          mkdir -p $INSTALLERS_DIR

      - name: Download Docker Desktop Installers
        env:
          LATEST_VERSION: ${{ env.LATEST_VERSION }}
          INSTALLERS_DIR: $INSTALLERS_DIR
        run: |
          declare -A installers=(
            ["docker_install.sh"]="https://get.docker.com"
            ["docker_desktop_installer_windows_x86_64.exe"]="https://desktop.docker.com/win/stable/${LATEST_VERSION}/Docker%20Desktop%20Installer.exe"
            ["docker_desktop_installer_mac_arm64.dmg"]="https://desktop.docker.com/mac/stable/${LATEST_VERSION}/Docker.dmg"
            ["docker_desktop_installer_mac_x86_64.dmg"]="https://desktop.docker.com/mac/stable/${LATEST_VERSION}/Docker.dmg"
            ["docker_desktop_installer_linux_debian_x86_64.deb"]="https://desktop.docker.com/linux/main/${LATEST_VERSION}/docker-desktop-latest-amd64.deb"
            ["docker_desktop_installer_linux_fedora_x86_64.rpm"]="https://desktop.docker.com/linux/main/${LATEST_VERSION}/docker-desktop-latest-x86_64.rpm"
            ["docker_desktop_installer_linux_ubuntu_x86_64.deb"]="https://desktop.docker.com/linux/main/${LATEST_VERSION}/docker-desktop-latest-amd64.deb"
            ["docker_desktop_installer_linux_centos_x86_64.rpm"]="https://desktop.docker.com/linux/main/${LATEST_VERSION}/docker-desktop-latest-x86_64.rpm"
          )

          for filename in "${!installers[@]}"; do
            url="${installers[$filename]}"
            file_path="$INSTALLERS_DIR/$filename"
            echo "Downloading $filename from$url"
            curl -L -o "$file_path" "$url" || { echo "Failed to download $filename"; exit 1; }

            if [ ! -s "$file_path" ]; then
              echo "$filename is empty after download. Exiting."
              exit 1
            fi
          done

  prepare_release_notes:
    name: Prepare Release Notes
    runs-on: ubuntu-latest
    needs: download_installers
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Generate Release Notes
        env:
          INSTALLERS_DIR: $INSTALLERS_DIR
          LATEST_VERSION: $LATEST_VERSION
        run: |
          release_file="release_notes.md"

          {
            echo "# Docker Installer Latest LTS Stable Version"
            echo "## Version: v${LATEST_VERSION}"
            echo ""
            echo "| File Name | File Size | Modified Date |"
            echo "| --------- | --------- | ------------- |"

            # 明确列出需要包含的文件
            for filename in \
              docker_desktop_installer_linux_centos_x86_64.rpm \
              docker_desktop_installer_linux_debian_x86_64.deb \
              docker_desktop_installer_linux_fedora_x86_64.rpm \
              docker_desktop_installer_linux_ubuntu_x86_64.deb \
              docker_desktop_installer_mac_arm64.dmg \
              docker_desktop_installer_mac_x86_64.dmg \
              docker_desktop_installer_windows_x86_64.exe \
              docker_install.sh; do

              file="$INSTALLERS_DIR/$filename"
              if [ -f "$file" ]; then
                size=$(du -h "$file" | awk '{print $1}')
                # 获取文件的最后修改时间，格式为 YYYY-MM-DD HH:MM:SS
                modified_date=$(date -r "$file" '+%Y-%m-%d %H:%M:%S')
                echo "| $filename |$size | $modified_date |"
              else
                echo "| $filename | **Missing** | **Missing** |"
              fi
            done

            echo ""
            echo "Thank you for using Docker! If you have any questions, please refer to the [official documentation](https://docs.docker.com/) or contact support."
            echo ""
            echo "## Assets"

            # 列出每个资产的信息
            for filename in \
              docker_desktop_installer_linux_centos_x86_64.rpm \
              docker_desktop_installer_linux_debian_x86_64.deb \
              docker_desktop_installer_linux_fedora_x86_64.rpm \
              docker_desktop_installer_linux_ubuntu_x86_64.deb \
              docker_desktop_installer_mac_arm64.dmg \
              docker_desktop_installer_mac_x86_64.dmg \
              docker_desktop_installer_windows_x86_64.exe \
              docker_install.sh; do

              file="$INSTALLERS_DIR/$filename"
              if [ -f "$file" ]; then
                size=$(du -h "$file" | awk '{print $1}')
                echo "- **$filename** -$size"
              fi
            done

            # 添加源代码链接
            echo ""
            echo "## Source Code"
            echo "- [Download Source Code (zip)](https://github.com/your-username/your-repo/archive/refs/tags/v${LATEST_VERSION}.zip)"
            echo "- [Download Source Code (tar.gz)](https://github.com/your-username/your-repo/archive/refs/tags/v${LATEST_VERSION}.tar.gz)"
          } > "$release_file"

          echo "Release notes generated: $release_file"

      - name: Upload Release Notes as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: release_notes
          path: release_notes.md

  create_release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: prepare_release_notes
    steps:
      - name: Download Release Notes
        uses: actions/download-artifact@v4
        with:
          name: release_notes
          path: .

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: "v${{ env.LATEST_VERSION }}"
          name: "Docker Installer Latest LTS Stable Version v${{ env.LATEST_VERSION }}"
          body_path: release_notes.md
          files: |
            ${{ env.INSTALLERS_DIR }}/docker_install.sh
            ${{ env.INSTALLERS_DIR }}/docker_desktop_installer_windows_x86_64.exe
            ${{ env.INSTALLERS_DIR }}/docker_desktop_installer_mac_arm64.dmg
            ${{ env.INSTALLERS_DIR }}/docker_desktop_installer_mac_x86_64.dmg
            ${{ env.INSTALLERS_DIR }}/docker_desktop_installer_linux_debian_x86_64.deb
            ${{ env.INSTALLERS_DIR }}/docker_desktop_installer_linux_fedora_x86_64.rpm
            ${{ env.INSTALLERS_DIR }}/docker_desktop_installer_linux_ubuntu_x86_64.deb
            ${{ env.INSTALLERS_DIR }}/docker_desktop_installer_linux_centos_x86_64.rpm
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Output Release Notes
        run: cat release_notes.md
        continue-on-error: true
