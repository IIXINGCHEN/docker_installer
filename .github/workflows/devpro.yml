name: Docker Installer Release

on:
  workflow_dispatch:  # 允许手动触发工作流
  schedule:           # 定期运行工作流
    - cron: '0 16 * * *'  # 每天 UTC 时间 16:00 运行

permissions:
  contents: write      # 允许读取和写入仓库内容
  packages: write      # 允许发布包

env:
  INSTALLERS_DIR: installers  # 存储安装包的目录

jobs:
  setup_environment:
    name: Setup Environment
    runs-on: ubuntu-latest
    outputs:
      latest_version: ${{ steps.get_latest_version.outputs.version }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y curl jq

      - name: Get Latest Docker Version
        id: get_latest_version
        run: |
          # 获取最新 Docker 版本（假设通过某 API 获取）
          latest_version=$(curl -s https://api.example.com/docker/latest-version)  # 请根据实际 API 修改
          if [ -z "$latest_version" ]; then
            echo "No stable Docker version found. Exiting."
            exit 1
          fi
          echo "version=$latest_version" >>$GITHUB_OUTPUT  # 设置步骤输出

  download_installers:
    name: Download Installers
    runs-on: ubuntu-latest
    needs: setup_environment
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set Up Environment Variables
        run: |
          mkdir -p $INSTALLERS_DIR

      - name: Download Docker Desktop Installers
        run: |
          declare -A installers=(
            ["docker_install.sh"]="https://get.docker.com"
            ["docker_desktop_installer_windows_x86_64.exe"]="https://desktop.docker.com/win/stable/amd64/Docker%20Desktop%20Installer.exe"
            ["docker_desktop_installer_mac_arm64.dmg"]="https://desktop.docker.com/mac/stable/arm64/Docker.dmg"
            ["docker_desktop_installer_mac_x86_64.dmg"]="https://desktop.docker.com/mac/stable/amd64/Docker.dmg"
            ["docker_desktop_installer_linux_debian_x86_64.deb"]="https://desktop.docker.com/linux/main/amd64/docker-desktop-latest-amd64.deb"
            ["docker_desktop_installer_linux_fedora_x86_64.rpm"]="https://desktop.docker.com/linux/main/amd64/docker-desktop-latest-x86_64.rpm"
            ["docker_desktop_installer_linux_ubuntu_x86_64.deb"]="https://desktop.docker.com/linux/main/amd64/docker-desktop-latest-amd64.deb"
            ["docker_desktop_installer_linux_centos_x86_64.rpm"]="https://desktop.docker.com/linux/main/amd64/docker-desktop-latest-x86_64.rpm"
          )

          for filename in "${!installers[@]}"; do
            url="${installers[$filename]}"
            file_path="$INSTALLERS_DIR/$filename"
            echo "Downloading $filename from$url"
            curl -L -o "$file_path" "$url" || { echo "Failed to download $filename"; exit 1; }

            if [ ! -s "$file_path" ]; then
              echo "$filename is empty after download. Exiting."
              exit 1
            fi
          done

  prepare_release_notes:
    name: Prepare Release Notes
    runs-on: ubuntu-latest
    needs: download_installers
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Generate Release Notes
        run: |
          VERSION="${{ needs.setup_environment.outputs.latest_version }}"
          release_file="release_notes.md"

          {
            echo "Docker Installer Latest LTS Stable Version"
            echo "Version: v${VERSION}"
            echo ""
            echo "| File Name | File Size | Modified Date |"
            echo "| --------- | --------- | ------------- |"
            
            # 明确列出需要包含的文件
            for filename in \
              docker_desktop_installer_linux_centos_x86_64.rpm \
              docker_desktop_installer_linux_debian_x86_64.deb \
              docker_desktop_installer_linux_fedora_x86_64.rpm \
              docker_desktop_installer_linux_ubuntu_x86_64.deb \
              docker_desktop_installer_mac_arm64.dmg \
              docker_desktop_installer_mac_x86_64.dmg \
              docker_desktop_installer_windows_x86_64.exe \
              docker_install.sh; do
              
              file="$INSTALLERS_DIR/$filename"
              if [ -f "$file" ]; then
                size=$(du -h "$file" | awk '{print $1}')
                # 获取文件的最后修改时间，格式为 YYYY-MM-DD HH:MM:SS
                modified_date=$(date -r "$file" '+%Y-%m-%d %H:%M:%S')
                echo "| $filename |$size | $modified_date |"
              else
                echo "| $filename | **Missing** | **Missing** |"
              fi
            done

            echo ""
            echo "Thank you for using Docker! If you have any questions, please refer to the official documentation or contact support."
            echo ""
            echo "Assets 10"

            # 列出每个资产的信息
            for filename in \
              docker_desktop_installer_linux_centos_x86_64.rpm \
              docker_desktop_installer_linux_debian_x86_64.deb \
              docker_desktop_installer_linux_fedora_x86_64.rpm \
              docker_desktop_installer_linux_ubuntu_x86_64.deb \
              docker_desktop_installer_mac_arm64.dmg \
              docker_desktop_installer_mac_x86_64.dmg \
              docker_desktop_installer_windows_x86_64.exe \
              docker_install.sh; do
              
              file="$INSTALLERS_DIR/$filename"
              if [ -f "$file" ]; then
                size=$(du -h "$file" | awk '{print $1}')
                # 由于 GitHub Actions 无法实时获取上传时间，这里使用相对时间
                echo "$filename"
                echo "$size"
                echo "a few minutes ago"
              fi
            done

            # 添加源代码链接
            echo "Source code"
            echo "(zip)"
            echo "$(date '+%b %d')"  # 示例日期，可根据需要调整
            echo "Source code"
            echo "(tar.gz)"
            echo "$(date '+%b %d')"
          } > "$release_file"

          echo "Release notes generated: $release_file"

      - name: Upload Release Notes as Artifacts
        uses: actions/upload-artifact@v4  # 使用最新版本
        with:
          name: release_notes
          path: release_notes.md

  create_release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: prepare_release_notes
    steps:
      - name: Download Release Notes
        uses: actions/download-artifact@v4
        with:
          name: release_notes
          path: .

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: "v${{ needs.setup_environment.outputs.latest_version }}"
          name: "Docker Installer Latest LTS Stable Version v${{ needs.setup_environment.outputs.latest_version }}"
          body_path: release_notes.md
          files: |
            $INSTALLERS_DIR/docker_install.sh
            $INSTALLERS_DIR/docker_desktop_installer_windows_x86_64.exe
            $INSTALLERS_DIR/docker_desktop_installer_mac_arm64.dmg
            $INSTALLERS_DIR/docker_desktop_installer_mac_x86_64.dmg
            $INSTALLERS_DIR/docker_desktop_installer_linux_debian_x86_64.deb
            $INSTALLERS_DIR/docker_desktop_installer_linux_fedora_x86_64.rpm
            $INSTALLERS_DIR/docker_desktop_installer_linux_ubuntu_x86_64.deb
            $INSTALLERS_DIR/docker_desktop_installer_linux_centos_x86_64.rpm
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Output Release Notes
        run: cat release_notes.md
        continue-on-error: true
