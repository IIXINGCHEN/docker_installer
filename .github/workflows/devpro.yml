name: Docker Installer Download

on:
  workflow_dispatch:  # 允许手动触发工作流
  schedule:  # 定期运行工作流
    - cron: '0 16 * * *'  # 每天 UTC 时间 16:00 运行

permissions:
  contents: write  # 允许读取和写入仓库内容
  packages: write  # 允许发布包

env:
  INSTALLERS_DIR: installers  # 存储安装包的目录

jobs:
  setup_environment:
    name: Setup Environment
    runs-on: ubuntu-latest
    outputs:
      latest_version: ${{ steps.get_latest_version.outputs.version }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y curl jq

      - name: Verify curl Installation
        run: |
          if ! command -v curl &> /dev/null; then
            echo "curl is not installed. Attempting to install..."
            sudo apt-get install -y curl
          fi
          if ! command -v curl &> /dev/null; then
            echo "Failed to install curl. Exiting!"
            exit 1
          fi

      - name: Get Latest Docker Version
        id: get_latest_version
        run: |
          latest_version=$(curl -sL https://download.docker.com/linux/static/stable/x86_64/ | 
            grep -oP 'docker-\K[0-9]+\.[0-9]+\.[0-9]+' | 
            sort -V | 
            tail -n 1)
          if [ -z "$latest_version" ]; then
            echo "No stable Docker version found. Exiting."
            exit 1
          fi
          echo "version=$latest_version" >>$GITHUB_OUTPUT  # 设置步骤输出

  download_installers:
    name: Download Installers
    runs-on: ubuntu-latest
    needs: setup_environment
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set Up Environment Variables
        run: |
          mkdir -p $INSTALLERS_DIR

      - name: Download Docker Desktop Installers
        run: |
          declare -A installers=(
            ["linux_centos_x86_64"]="https://desktop.docker.com/linux/main/amd64/docker-desktop-latest-x86_64.rpm"
            ["linux_debian_x86_64"]="https://desktop.docker.com/linux/main/amd64/docker-desktop-latest-amd64.deb"
            ["linux_fedora_x86_64"]="https://desktop.docker.com/linux/main/amd64/docker-desktop-latest-x86_64.rpm"
            ["linux_ubuntu_x86_64"]="https://desktop.docker.com/linux/main/amd64/docker-desktop-latest-amd64.deb"
            ["mac_arm64"]="https://desktop.docker.com/mac/stable/arm64/Docker.dmg"
            ["mac_x86_64"]="https://desktop.docker.com/mac/stable/amd64/Docker.dmg"
            ["windows_x86_64"]="https://desktop.docker.com/win/stable/amd64/Docker%20Desktop%20Installer.exe"
            ["docker_install.sh"]="https://get.docker.com"
          )

          for key in "${!installers[@]}"; do
            echo "Processing platform: $key"  # 调试信息
            url="${installers[$key]}"
            case "$key" in
              "linux_debian_x86_64"|"linux_ubuntu_x86_64") extension=".deb" ;;
              "linux_fedora_x86_64"|"linux_centos_x86_64") extension=".rpm" ;;
              "mac_arm64"|"mac_x86_64") extension=".dmg" ;;
              "windows_x86_64") extension=".exe" ;;
              "docker_install.sh") extension=".sh" ;;
              *) echo "Unknown platform: $key"; exit 1 ;;
            esac
            if [ "$key" != "docker_install.sh" ]; then
              file="$INSTALLERS_DIR/docker_desktop_installer_${key}${extension}"
            else
              file="$INSTALLERS_DIR/docker_install.sh"
            fi
            echo "Downloading $file from$url"
            curl -L -o "$file" "$url" || { echo "Failed to download $file"; exit 1; }

            if [ ! -s "$file" ]; then
              echo "$file is empty after download. Exiting."
              exit 1
            fi
          done

  prepare_release_notes:
    name: Prepare Release Notes
    runs-on: ubuntu-latest
    needs: download_installers
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Generate Release Notes
        run: |
          VERSION="${{ needs.setup_environment.outputs.latest_version }}"
          release_file="release_notes.md"

          {
            echo "Docker Installer Latest LTS Stable Version"
            echo "Version: v${VERSION}"
            echo ""
            echo "| File Name | File Size | Modified Date |"
            echo "| --------- | --------- | ------------- |"
            for file in $INSTALLERS_DIR/docker_desktop_installer_*.*$INSTALLERS_DIR/docker_install.sh; do
              if [ -f "$file" ]; then
                size=$(du -h "$file" | awk '{print $1}')
                modified_date=$(date -r "$file" '+%Y-%m-%d %H:%M:%S')
                echo "| $(basename "$file") | $size |$modified_date |"
              fi
            done
            echo ""
            echo "Thank you for using Docker! If you have any questions, please refer to the official documentation or contact support."
            echo ""
            echo "Assets $(ls$INSTALLERS_DIR | wc -l)"
            for file in $INSTALLERS_DIR/*; do
              if [ -f "$file" ]; then
                filename=$(basename "$file")
                size=$(du -h "$file" | awk '{print $1}')
                # 获取文件上传时间
                upload_time=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
                echo "$filename"
                echo "$size"
                echo "a few minutes ago"
              elif [ -d "$file" ]; then
                # 如果有其他文件夹或类型，可以根据需要处理
                :
              fi
            done
            # 添加源代码链接
            echo "Source code"
            echo "(zip)"
            echo "$(date -d "$VERSION" '+%b %d')"  # 假设版本对应的日期
            echo "Source code"
            echo "(tar.gz)"
            echo "$(date -d "$VERSION" '+%b %d')"
          } > "$release_file"

          echo "Release notes generated: $release_file"

      - name: Upload Release Notes as Artifacts
        uses: actions/upload-artifact@v4  # 更新到 v4
        with:
          name: release_notes
          path: release_notes.md

  create_release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: prepare_release_notes
    steps:
      - name: Download Release Notes
        uses: actions/download-artifact@v4  # 更新到 v4
        with:
          name: release_notes
          path: .

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: "v${{ needs.setup_environment.outputs.latest_version }}"
          name: "Docker Installer Latest LTS Stable Version v${{ needs.setup_environment.outputs.latest_version }}"
          body_path: release_notes.md
          files: |
            $INSTALLERS_DIR/docker_install.sh
            $INSTALLERS_DIR/docker_desktop_installer_windows_x86_64.exe
            $INSTALLERS_DIR/docker_desktop_installer_mac_arm64.dmg
            $INSTALLERS_DIR/docker_desktop_installer_mac_x86_64.dmg
            $INSTALLERS_DIR/docker_desktop_installer_linux_debian_x86_64.deb
            $INSTALLERS_DIR/docker_desktop_installer_linux_fedora_x86_64.rpm
            $INSTALLERS_DIR/docker_desktop_installer_linux_ubuntu_x86_64.deb
            $INSTALLERS_DIR/docker_desktop_installer_linux_centos_x86_64.rpm
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Output Release Notes
        run: cat release_notes.md
        continue-on-error: true
