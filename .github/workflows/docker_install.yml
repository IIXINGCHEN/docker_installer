name: Docker Installer Download  # 工作流程名称

on:
  workflow_dispatch:  # 允许手动触发
  schedule:  # 定时触发
    - cron: '0 16 * * *'  # 每天 UTC 16:00 运行

permissions:
  contents: write  # 允许写入内容
  packages: write  # 允许写入包

jobs:
  download_installer:  # 作业名称
    runs-on: ubuntu-latest  # 运行环境

    steps:
      - name: Checkout repository  # 检出代码库
        uses: actions/checkout@v4

      - name: Install required packages  # 安装所需包
        run: |
          sudo apt-get update -y
          sudo apt-get install -y --no-install-recommends curl jq

      - name: Retrieve Latest Docker Version  # 获取最新 Docker 版本
        id: get_latest_version  # 步骤 ID
        run: |
          # 使用 GitHub API 获取 Docker CE 的最新版本
          latest_version=$(curl -s https://api.github.com/repos/docker/docker-ce/releases/latest | jq -r .tag_name)

          if [ -z "$latest_version" ] || [ "$latest_version" == "null" ]; then
            echo "No stable Docker version found, exiting."
            exit 1
          fi

          echo "Latest stable Docker version: $latest_version"
          echo "version=$latest_version" >> $GITHUB_ENV

      - name: Download Docker installation script & Installers  # 并行下载安装脚本和安装程序
        run: |
          declare -A installers=(
            ["windows_x86_64"]="https://desktop.docker.com/win/stable/amd64/Docker%20Desktop%20Installer.exe"
            ["mac_arm64"]="https://desktop.docker.com/mac/stable/arm64/Docker.dmg"
            ["mac_x86_64"]="https://desktop.docker.com/mac/stable/amd64/Docker.dmg"
            ["linux_debian_x86_64"]="https://desktop.docker.com/linux/main/amd64/docker-desktop-latest-amd64.deb"
            ["linux_fedora_x86_64"]="https://desktop.docker.com/linux/main/amd64/docker-desktop-latest-x86_64.rpm"
            ["linux_ubuntu_x86_64"]="https://desktop.docker.com/linux/main/amd64/docker-desktop-latest-amd64.deb"
            ["linux_centos_x86_64"]="https://desktop.docker.com/linux/main/amd64/docker-desktop-latest-amd64.rpm"
          )

          # 下载安装脚本
          curl -L -o docker_install.sh "https://get.docker.com" || { echo "Failed to download docker_install.sh"; exit 1; } &

          # 下载安装程序
          for key in "${!installers[@]}"; do
            url="${installers[$key]}"
            extension="${url##*.}"
            file_name="docker_desktop_installer_${key}.${extension}"
            echo "Downloading $file_name from $url"
            curl -L -o "$file_name" "$url" || { echo "Failed to download $file_name"; exit 1; } &
          done

          wait  # 等待所有后台下载完成

          # 检查文件完整性
          for key in "${!installers[@]}"; do
            extension="${installers[$key]##*.}"
            file_name="docker_desktop_installer_${key}.${extension}"
            if [ ! -f "$file_name" ] || [ ! -s "$file_name" ]; then
              echo "$file_name does not exist or is empty after download"
              exit 1
            fi
          done

          if [ ! -f "docker_install.sh" ] || [ ! -s "docker_install.sh" ]; then
            echo "docker_install.sh does not exist or is empty after download"
            exit 1
          fi

      - name: Prepare Release Notes  # 准备发布说明
        run: |
          release_note_file="release_notes.md"

          echo "# Docker Installer Latest LTS Stable Version" > "$release_note_file"
          echo "" >> "$release_note_file"
          echo "**Version:** ${{ env.version }}" >> "$release_note_file"
          echo "" >> "$release_note_file"

          echo "| File Name | File Size | Modified Date |" >> "$release_note_file"
          echo "| --------- | --------- | ------------- |" >> "$release_note_file"

          for file in docker_desktop_installer_*.* docker_install.sh; do
            if [ -f "$file" ]; then
              size=$(du -h "$file" | cut -f1)
              modified_date=$(date -r "$file" '+%Y-%m-%d %H:%M:%S')
              echo "| $file | $size | $modified_date |" >> "$release_note_file"
            fi
          done

          echo "" >> "$release_note_file"
          echo "Thank you for using Docker! If you have any questions, please refer to the official documentation or contact support." >> "$release_note_file"

          cat "$release_note_file"

      - name: Create Release  # 创建发布
        id: release  # 步骤 ID
        uses: softprops/action-gh-release@v2
        with:
          tag_name: "${{ env.version }}"  # 使用版本号作为标签名
          name: "Docker Installer Latest LTS Stable Version ${{ env.version }}"  # 发布名称
          body_path: release_notes.md  # 发布说明文件路径
          files: |  # 发布文件列表
            docker_install.sh
            docker_desktop_installer_windows_x86_64.exe
            docker_desktop_installer_mac_arm64.dmg
            docker_desktop_installer_mac_x86_64.dmg
            docker_desktop_installer_linux_debian_x86_64.deb
            docker_desktop_installer_linux_fedora_x86_64.rpm
            docker_desktop_installer_linux_ubuntu_x86_64.deb
            docker_desktop_installer_linux_centos_x86_64.rpm
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Output Release Notes  # 输出发布说明
        run: cat release_notes.md  # 打印发布说明内容
