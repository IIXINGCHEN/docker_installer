name: Docker CLI Latest Release

on:
  workflow_dispatch: # 手动触发
  schedule:
    - cron: '0 16 * * *' # 每天 UTC 16:00 运行

permissions:
  contents: read
  packages: write

jobs:
  download_cli:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up environment
        run: |
          sudo apt-get update -y
          sudo apt-get install -y curl jq

      - name: Retrieve Latest Docker CLI Version
        id: get_latest_version
        run: |
          # 获取所有非预发布的发布
          latest_version=$(curl -s -H "Authorization: token $GITHUB_TOKEN" -H "Accept: application/vnd.github.v3+json" https://api.github.com/repos/docker/cli/releases | jq -r '[.[] | select(.prerelease == false) | .tag_name] | sort -V | tail -n1')
          echo "API returned version: $latest_version"
          if [ -z "$latest_version" ] || [ "$latest_version" == "null" ]; then
            echo "No stable Docker version found, exiting."
            exit 1
          fi
          echo "version=${latest_version#v}" >> $GITHUB_ENV
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Verify Version
        run: |
          echo "Docker CLI version: ${{ env.version }}"

      - name: Download Docker CLI Binary
        run: |
          # 假设您要下载特定版本的二进制文件
          # 请根据实际情况调整下载 URL
          download_url="https://github.com/docker/cli/releases/download/v${{ env.version }}/docker-${{ env.version }}.tgz"
          echo "Downloading Docker CLI from $download_url"
          curl -L -o docker-cli-${{ env.version }}.tgz "$download_url"
          
          # 检查文件完整性
          if [ ! -f "docker-cli-${{ env.version }}.tgz" ] || [ ! -s "docker-cli-${{ env.version }}.tgz" ]; then
            echo "Docker CLI binary not found or is empty after download"
            exit 1
          fi

      - name: Extract Docker CLI Binary
        run: |
          tar -xzf docker-cli-${{ env.version }}.tgz
          # 假设解压后的文件路径，根据实际情况调整
          ls -la docker-${{ env.version }}
