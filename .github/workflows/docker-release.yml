# Docker 安装程序自动化发布工作流
# 功能：自动下载、验证和发布最新版本的Docker安装程序
# 维护者：您的团队名称
# 最后更新：2024-12-18
# 依赖版本：
#   - Ubuntu: 22.04 LTS (Jammy Jellyfish)
#   - Node.js: 20.x LTS
#   - Python: 3.12.x
#   - actions/checkout: v4.1.1
#   - actions/cache: v3.3.2
#   - anchore/scan-action: v3.1.0
#   - github/codeql-action: v2.22.8
#   - softprops/action-gh-release: v2.0.1
#   - peter-evans/repository-dispatch: v2.1.2
#   - mdformat: 0.7.17
#   - mdformat-gfm: 0.3.5

name: Docker Release Workflow

# 环境变量
env:
  INSTALLER_DIR: "installers"
  MINIMUM_FILE_SIZE_MB: 400
  DOWNLOAD_TIMEOUT: 600
  CONNECT_TIMEOUT: 30
  MAX_RETRIES: 3
  CACHE_VERSION: "v1"
  NODE_VERSION: "20.10.0"  # Latest LTS
  PYTHON_VERSION: "3.12.1" # Latest Stable

# 触发条件
on:
  workflow_dispatch:  # 支持手动触发
    inputs:
      environment:
        description: '选择部署环境'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
  schedule:
    - cron: '0 16 * * *'  # 每天UTC 16:00（约北京时间00:00）运行

# 权限配置
permissions:
  contents: write
  packages: read
  security-events: write  # 用于安全扫描结果

jobs:
  # 安全检查作业
  security:
    name: 安全检查
    runs-on: ubuntu-22.04
    permissions:
      security-events: write
      actions: read
      contents: read
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4.1.1
        
      - name: 运行 Anchore 容器扫描
        uses: anchore/scan-action@v3.1.0
        id: scan
        with:
          path: "."
          fail-build: false
          severity-cutoff: high
          acs-report-enable: true
        continue-on-error: true
          
      - name: 上传扫描结果
        uses: github/codeql-action/upload-sarif@v2.22.8
        if: success() || failure()
        with:
          sarif_file: ${{ steps.scan.outputs.sarif }}
          wait-for-processing: true
          category: anchore-scan

  # 主要发布作业
  release:
    name: 创建发布
    needs: security
    runs-on: ubuntu-22.04
    permissions:
      contents: write
      packages: write
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4.1.1
        with:
          fetch-depth: 0
        
      - name: Setup Node.js
        uses: actions/setup-node@v4.0.1
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Setup Python
        uses: actions/setup-python@v5.0.0
        with:
          python-version: ${{ env.PYTHON_VERSION }}
        
      - name: 安装基础工具
        run: |
          sudo apt-get update
          sudo apt-get install -y ca-certificates gnupg lsb-release
          sudo apt-get install -y --no-install-recommends curl
          
      - name: 验证工具安装
        run: |
          which curl
          curl --version

      - name: Setup environment
        run: |
          # 更新到最新的软件包
          sudo apt-get update -y
          sudo apt-get install -y \
            curl=7.81.0-1ubuntu1.15 \
            jq=1.6-2.1ubuntu3 \
            gpg=2.2.27-3ubuntu2.1 \
            bc=1.07.1-3build1
          
          # 创建安装目录
          mkdir -p "${{ env.INSTALLER_DIR }}"
          
          # 安装最新版本的依赖包
          python -m pip install --upgrade pip
          pip install \
            requests==2.31.0 \
            cryptography==41.0.7 \
            packaging==23.2

      - name: Get latest Docker version
        id: version
        run: |
          echo "正在获取最新Docker版本..."
          # 使用 curl 的最新 LTS 特性
          latest_version=$(curl --http2 --tlsv1.3 -sSL \
            --retry 3 \
            --retry-delay 5 \
            --retry-max-time 30 \
            --connect-timeout 10 \
            https://download.docker.com/linux/static/stable/x86_64/ | 
            grep -oP 'docker-\K[0-9]+\.[0-9]+\.[0-9]+' | 
            sort -V | 
            tail -n 1)
            
          if [[ ! $latest_version =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "❌ 错误：无效的版本号格式 - $latest_version"
            exit 1
          fi
          
          echo "✅ 检测到最新版本：$latest_version"
          echo "version=$latest_version" >> $GITHUB_ENV
          echo "release_tag=v$latest_version" >> $GITHUB_ENV

      - name: Setup download configuration
        id: config
        run: |
          # 使用 jq 1.6 的新特性格式化 JSON
          jq -n \
            --arg version "${{ env.version }}" \
            '{
              "installers": {
                "windows_x86_64": {
                  "url": "https://desktop.docker.com/win/stable/amd64/Docker%20Desktop%20Installer.exe",
                  "filename": "docker_desktop_installer_windows_x86_64.exe",
                  "min_size": 400,
                  "verify_command": "certutil -hashfile"
                },
                "mac_arm64": {
                  "url": "https://desktop.docker.com/mac/stable/arm64/Docker.dmg",
                  "filename": "docker_desktop_installer_mac_arm64.dmg",
                  "min_size": 400,
                  "verify_command": "shasum -a 256"
                },
                "mac_x86_64": {
                  "url": "https://desktop.docker.com/mac/stable/amd64/Docker.dmg",
                  "filename": "docker_desktop_installer_mac_x86_64.dmg",
                  "min_size": 400,
                  "verify_command": "shasum -a 256"
                },
                "linux_debian_x86_64": {
                  "url": "https://desktop.docker.com/linux/main/amd64/docker-desktop-\($version).deb",
                  "filename": "docker_desktop_installer_linux_debian_x86_64.deb",
                  "min_size": 400,
                  "verify_command": "sha256sum"
                },
                "linux_fedora_x86_64": {
                  "url": "https://desktop.docker.com/linux/main/amd64/docker-desktop-\($version).rpm",
                  "filename": "docker_desktop_installer_linux_fedora_x86_64.rpm",
                  "min_size": 400,
                  "verify_command": "sha256sum"
                },
                "linux_ubuntu_x86_64": {
                  "url": "https://desktop.docker.com/linux/main/amd64/docker-desktop-\($version).deb",
                  "filename": "docker_desktop_installer_linux_ubuntu_x86_64.deb",
                  "min_size": 400,
                  "verify_command": "sha256sum"
                },
                "linux_centos_x86_64": {
                  "url": "https://desktop.docker.com/linux/main/amd64/docker-desktop-\($version).rpm",
                  "filename": "docker_desktop_installer_linux_centos_x86_64.rpm",
                  "min_size": 400,
                  "verify_command": "sha256sum"
                }
              }
            }' > download_config.json

      - name: Restore cache
        uses: actions/cache@v3.3.2
        with:
          path: ${{ env.INSTALLER_DIR }}
          key: ${{ env.CACHE_VERSION }}-docker-installers-${{ env.version }}-${{ hashFiles('download_config.json') }}
          restore-keys: |
            ${{ env.CACHE_VERSION }}-docker-installers-${{ env.version }}-
            ${{ env.CACHE_VERSION }}-docker-installers-

      - name: Download and verify installers
        run: |
          # 使用最新版本的 OpenSSL 和 curl 功能
          export CURL_SSL_BACKEND=openssl
          export SSL_CERT_DIR=/etc/ssl/certs
          
          # 下载和验证函数
          download_and_verify() {
            local url="$1"
            local output_file="$2"
            local min_size_mb="$3"
            local verify_cmd="$4"
            local retry_count=0
            
            while [ $retry_count -lt ${{ env.MAX_RETRIES }} ]; do
              echo "⏬ 正在下载 $output_file (尝试 $((retry_count + 1))/${{ env.MAX_RETRIES }})"
              
              if curl --http2 --tlsv1.3 -L --fail --progress-bar \
                --connect-timeout ${{ env.CONNECT_TIMEOUT }} \
                --max-time ${{ env.DOWNLOAD_TIMEOUT }} \
                --retry 3 --retry-delay 5 \
                --retry-max-time 60 \
                -o "$output_file" "$url"; then
                
                if [ -s "$output_file" ]; then
                  local file_size_mb=$(du -m "$output_file" | cut -f1)
                  
                  if [ "$file_size_mb" -lt "$min_size_mb" ]; then
                    echo "❌ 错误：文件大小异常 ($file_size_mb MB < $min_size_mb MB)"
                    rm -f "$output_file"
                    retry_count=$((retry_count + 1))
                    sleep 5
                    continue
                  fi
                  
                  # 计算并保存校验和
                  local file_hash=$($verify_cmd "$output_file" | cut -d' ' -f1)
                  echo "$file_hash" > "${output_file}.sha256"
                  echo "✅ 下载成功："
                  echo "   📦 大小：${file_size_mb}MB"
                  echo "   🔒 SHA256：${file_hash:0:8}..."
                  return 0
                fi
              fi
              
              echo "⚠️ 下载失败，准备重试..."
              rm -f "$output_file"
              retry_count=$((retry_count + 1))
              sleep 5
            done
            
            echo "❌ 下载失败：$output_file"
            echo "🔍 下载链接：$url"
            return 1
          }
          
          # 读取配置并下载所有安装程序
          while IFS= read -r line; do
            eval "local $line"
            local platform=$(echo "$line" | cut -d'=' -f1)
            local url=$(echo "$url" | tr -d '"')
            local filename=$(echo "$filename" | tr -d '"')
            local min_size=$(echo "$min_size" | tr -d '"')
            local verify_cmd=$(echo "$verify_command" | tr -d '"')
            
            file_path="${{ env.INSTALLER_DIR }}/$filename"
            
            # 检查缓存文件
            if [ -f "$file_path" ] && [ -f "${file_path}.sha256" ]; then
              size_mb=$(du -m "$file_path" | cut -f1)
              if [ "$size_mb" -ge "$min_size" ]; then
                echo "📦 使用缓存：$filename ($size_mb MB)"
                continue
              fi
              echo "⚠️ 缓存文件大小异常，重新下载：$filename"
              rm -f "$file_path" "${file_path}.sha256"
            fi
            
            if ! download_and_verify "$url" "$file_path" "$min_size" "$verify_cmd"; then
              exit 1
            fi
          done < <(jq -r '.installers | to_entries | .[] | select(.key) | "url=\(.value.url) filename=\(.value.filename) min_size=\(.value.min_size) verify_command=\(.value.verify_command)"' download_config.json)

      - name: Download installation script
        run: |
          echo "📥 正在下载Docker安装脚本..."
          # 使用最新的 curl 特性和安全选项
          curl --http2 --tlsv1.3 -sSL \
            --retry 3 \
            --retry-delay 5 \
            --retry-max-time 30 \
            --connect-timeout 10 \
            -o docker_install.sh \
            https://get.docker.com
          
          # 验证脚本完整性
          if ! grep -q "get.docker.com" docker_install.sh || ! grep -q "Docker CE" docker_install.sh; then
            echo "❌ 安装脚本验证失败"
            exit 1
          fi
          
          # 设置适当的权限
          chmod 755 docker_install.sh
          echo "✅ 安装脚本下载完成"

      - name: Generate release notes
        run: |
          # 使用最新版本的 markdown 工具
          pip install --upgrade mdformat==0.7.17 mdformat-gfm==0.3.5
          
          # 生成发布说明
          cat << EOF > release_notes.md
          # Docker 安装程序 - 最新稳定版本
          
          **版本：** v${{ env.version }}
          **发布日期：** $(date '+%Y-%m-%d')
          **支持平台：** Windows, macOS (Intel/ARM), Linux
          
          ## 📦 安装包列表
          
          | 文件名 | 大小 | SHA256校验和 | 平台 |
          |:-------|:-----|:------------|:-----|
          $(for f in ${{ env.INSTALLER_DIR }}/*.*; do
            if [ -f "$f" ]; then
              name=$(basename "$f")
              size=$(numfmt --to=iec-i --suffix=B $(stat -c%s "$f"))
              sha=$(cat "${f}.sha256" 2>/dev/null || echo 'N/A')
              platform=$(echo "$name" | grep -oP '(?<=installer_)[^.]+' || echo 'Unknown')
              echo "| $name | $size | ${sha:0:8}... | $platform |"
            fi
          done)
          
          ## 📝 安装说明
          
          ### 系统要求
          
          #### Windows
          - Windows 10/11 64位：版本 21H2 或更高
          - 启用 WSL 2 和虚拟化功能
          - 最少 4GB RAM
          
          #### macOS
          - macOS Monterey 12 或更高版本
          - Apple Silicon (M1/M2) 或 Intel 处理器
          - 最少 4GB RAM
          
          #### Linux
          - 内核版本 5.10 或更高
          - systemd init 系统
          - KVM 虚拟化支持
          - 最少 4GB RAM
          
          ### 安装步骤
          
          #### Windows
          1. 下载 \`docker_desktop_installer_windows_x86_64.exe\`
          2. 验证文件的 SHA256 校验和
          3. 双击安装程序运行安装
          4. 根据向导完成安装
          
          #### macOS
          1. 下载适合您处理器的 .dmg 文件
          2. 验证文件的 SHA256 校验和
          3. 双击打开 .dmg 文件
          4. 将 Docker.app 拖到 Applications 文件夹
          5. 从启动台运行 Docker Desktop
          
          #### Linux
          
          ##### Ubuntu/Debian
          \`\`\`bash
          # 验证包的完整性
          sha256sum docker-desktop-*.deb
          # 安装包
          sudo apt update
          sudo apt install -y ./docker-desktop-*.deb
          \`\`\`
          
          ##### Fedora/CentOS
          \`\`\`bash
          # 验证包的完整性
          sha256sum docker-desktop-*.rpm
          # 安装包
          sudo dnf install -y ./docker-desktop-*.rpm
          \`\`\`
          
          ### 验证安装
          
          安装完成后，运行以下命令验证安装：
          \`\`\`bash
          docker --version
          docker compose version
          docker run hello-world
          \`\`\`
          
          ## 🔄 更新说明
          
          本版本包含以下更新：
          - 使用最新的 Docker Engine ${{ env.version }}
          - 安全性和性能改进
          - 支持最新的操作系统版本
          
          ## 🔗 相关链接
          
          - [Docker 官方文档](https://docs.docker.com)
          - [安装指南](https://docs.docker.com/desktop/)
          - [发行说明](https://docs.docker.com/desktop/release-notes/)
          - [常见问题](https://docs.docker.com/desktop/faqs/)
          
          ## 💬 技术支持
          
          如需帮助：
          1. 访问 [Docker 官方文档](https://docs.docker.com)
          2. 加入 [Docker 社区](https://forums.docker.com)
          3. 提交 [GitHub Issue](https://github.com/docker/docker-install/issues)
          
          ## 🔒 安全提示
          
          1. 始终从官方源下载 Docker
          2. 安装前验证文件的 SHA256 校验和
          3. 定期更新到最新版本以获取安全补丁
          4. 使用安全的容器配置
          
          EOF
          
          # 格式化 markdown 文件
          mdformat release_notes.md

      - name: Create release
        id: create_release
        uses: softprops/action-gh-release@v2.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.release_tag }}
          name: "Docker Desktop ${{ env.version }}"
          body_path: release_notes.md
          files: |
            ${{ env.INSTALLER_DIR }}/*.exe
            ${{ env.INSTALLER_DIR }}/*.dmg
            ${{ env.INSTALLER_DIR }}/*.deb
            ${{ env.INSTALLER_DIR }}/*.rpm
            docker_install.sh
            release_notes.md
          draft: false
          prerelease: false
          generate_release_notes: true

      - name: Cleanup
        if: always()
        run: |
          echo "🧹 清理临时文件..."
          rm -f download_config.json
          rm -f *.sha256
          echo "✅ 清理完成"

  # 通知作业
  notify:
    needs: [release]
    runs-on: ubuntu-22.04
    if: always()
    
    steps:
      - name: Send notification
        uses: peter-evans/repository-dispatch@v2.1.2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          event-type: docker-release-complete
          client-payload: |
            {
              "version": "${{ env.version }}",
              "status": "${{ needs.release.result }}",
              "timestamp": "$(date -u '+%Y-%m-%dT%H:%M:%SZ')",
              "environment": "${{ github.event.inputs.environment || 'scheduled' }}"
            }

      - name: 更新系统包
        run: |
          sudo apt-get update
          sudo apt-get install -y curl wget
          
      - name: 检查工具版本
        run: |
          curl --version
          wget --version
